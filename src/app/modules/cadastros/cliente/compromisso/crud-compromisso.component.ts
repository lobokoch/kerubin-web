/**********************************************************************************************
Code generated by MKL Plug-in
Copyright: Kerubin - kerubin.platform@gmail.com

WARNING: DO NOT CHANGE THIS CODE BECAUSE THE CHANGES WILL BE LOST IN THE NEXT CODE GENERATION.
***********************************************************************************************/


import { Component, OnInit } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import {MessageService} from 'primeng/api';

import { ElementRef, ViewChild } from '@angular/core';
import { Compromisso } from './compromisso.model';
import { CompromissoService } from './compromisso.service';
import { CadastrosClienteTranslationService } from './../i18n/cadastros-cliente-translation.service';
import * as moment from 'moment';

import { ClienteService } from './../cliente/cliente.service';
import { Cliente } from './../cliente/cliente.model';
import { ClienteAutoComplete } from './../cliente/cliente.model';

import { RecursoService } from './../recurso/recurso.service';
import { Recurso } from './../recurso/recurso.model';
import { RecursoAutoComplete } from './../recurso/recurso.model';
import { MessageHandlerService } from 'src/app/core/message-handler.service';


@Component({
  selector: 'app-crud-compromisso',
  templateUrl: './crud-compromisso.component.html',
  styleUrls: ['./crud-compromisso.component.css']
})

export class CompromissoComponent implements OnInit {
	showHideHelp = false; // for show/hide help.
	
	
	calendarLocale: any;
	
	compromisso = new Compromisso();
	compromissoClienteAutoCompleteSuggestions: ClienteAutoComplete[];
	
	
	compromissoRecursosAutoCompleteSuggestions: RecursoAutoComplete[];
	
	@ViewChild('compromisso_titulo_elementRef', {static: true}) compromissoDefaultElementRef: ElementRef;
	
	constructor(
	    private compromissoService: CompromissoService,
	    private cadastrosClienteTranslationService: CadastrosClienteTranslationService,
	    private clienteService: ClienteService,
	    
	    
	    private recursoService: RecursoService,
	    private route: ActivatedRoute,
	    private messageHandler: MessageHandlerService
	) { 
	}
	
	ngOnInit() {
		this.initLocaleSettings();
	    const id = this.route.snapshot.params['id'];
	    if (id) {
	      this.getCompromissoById(id);
	    }
	    this.compromissoDefaultElementSetFocus();
	}
	
	getShowHideHelpLabel(): string {
		return this.showHideHelp ? 'Ocultar ajuda' : 'Mostrar ajuda';
	}
	
	beginFormCompromisso(form: FormControl) {
	    form.reset();
	    setTimeout(function() {
	      this.compromisso = new Compromisso();
		  this.compromissoDefaultElementSetFocus();
	    }.bind(this), 1);
	}
	
	validateAllFormFields(form: FormGroup) {
	    Object.keys(form.controls).forEach(field => {
	      const control = form.get(field);
	
	      if (control instanceof FormControl) {
	        control.markAsDirty({ onlySelf: true });
	      } else if (control instanceof FormGroup) {
	        this.validateAllFormFields(control);
	      }
	    });
	}
	
	saveFormCompromisso(form: FormGroup) {
		if (!form.valid) {
	      this.validateAllFormFields(form);
	      return;
	    }
	    if (this.isEditing) {
	      this.update();
	    } else {
	      this.create();
	    }
	}
	
	create() {
		
	    this.compromissoService.create(this.compromisso)
	    .then((compromisso) => {
	      this.compromisso = compromisso;
	      this.messageHandler.showSuccess('Registro criado com sucesso!');
	      this.compromissoDefaultElementSetFocus();
	    }).
	    catch(error => {
	      this.messageHandler.showError(error);
	    });
	}
	
	update() {
	    this.compromissoService.update(this.compromisso)
	    .then((compromisso) => {
	      this.compromisso = compromisso;
	      this.messageHandler.showSuccess('Registro alterado!');
	      this.compromissoDefaultElementSetFocus();
	    })
	    .catch(error => {
	      this.messageHandler.showError(error);
	    });
	}
	
	getCompromissoById(id: string) {
	    this.compromissoService.retrieve(id)
	    .then((compromisso) => { 
	    	this.compromisso = compromisso;
	    })
	    .catch(error => {
	      this.messageHandler.showError(error);
	    });
	}
	
	get isEditing() {
	    return Boolean(this.compromisso.id);
	}
	
	
	
	compromissoClienteAutoCompleteClear(event) {
		// The autoComplete value has been reseted
		this.compromisso.cliente = null;
	}
	
	compromissoClienteAutoCompleteOnBlur(event) {
		// Seems a PrimeNG bug, if clear an autocomplete field, on onBlur event, the null value is empty string.
		// Until PrimeNG version: 7.1.3.
		if (String(this.compromisso.cliente) === '') {
			this.compromisso.cliente = null;
		}
	}
	
	compromissoClienteAutoComplete(event) {
	    const query = event.query;
	    this.compromissoService
	      .clienteClienteAutoComplete(query)
	      .then((result) => {
	        this.compromissoClienteAutoCompleteSuggestions = result as ClienteAutoComplete[];
	      })
	      .catch(error => {
	        this.messageHandler.showError(error);
	      });
	}
	
	compromissoClienteAutoCompleteFieldConverter(cliente: ClienteAutoComplete) {
		let text = '';
		if (cliente) {
			if (cliente.nome) {
			    if (text !== '') {
			      text += ' - ';
			    }
			    text += cliente.nome; 
			}
			
		}
		
		if (text === '') {
			text = null;
		}
		return text;
	}
	
	
	compromissoRecursosAutoCompleteClear(event) {
		// The autoComplete value has been reseted
		this.compromisso.recursos = null;
	}
	
	compromissoRecursosAutoCompleteOnBlur(event) {
		// Seems a PrimeNG bug, if clear an autocomplete field, on onBlur event, the null value is empty string.
		// Until PrimeNG version: 7.1.3.
		if (String(this.compromisso.recursos) === '') {
			this.compromisso.recursos = null;
		}
	}
	
	compromissoRecursosAutoComplete(event) {
	    const query = event.query;
	    this.compromissoService
	      .recursoRecursosAutoComplete(query)
	      .then((result) => {
	        this.compromissoRecursosAutoCompleteSuggestions = result as RecursoAutoComplete[];
	      })
	      .catch(error => {
	        this.messageHandler.showError(error);
	      });
	}
	
	compromissoRecursosAutoCompleteFieldConverter(recursos: RecursoAutoComplete) {
		let text = '';
		if (recursos) {
			if (recursos.nome) {
			    if (text !== '') {
			      text += ' - ';
			    }
			    text += recursos.nome; 
			}
			
		}
		
		if (text === '') {
			text = null;
		}
		return text;
	}
	
	
	// TODO: temporário, só para testes.
	getTranslation(key: string): string {
		const value = this.cadastrosClienteTranslationService.getTranslation(key);
		return value;
		
		// const result = key.substring(key.lastIndexOf('_') + 1);
		// return result;
	}
	
	
	
	
	
	
	
	initLocaleSettings() {
		this.calendarLocale = this.cadastrosClienteTranslationService.getCalendarLocaleSettings();
	}
	
	
	
				
	compromissoDefaultElementSetFocus() {
		try {
	    	this.compromissoDefaultElementRef.nativeElement.focus();
	    } catch (error) {
	    	console.log('Error setting focus at compromissoDefaultElementSetFocus:' + error);
	    }
	}
}
