/**********************************************************************************************
Code generated by MKL Plug-in
Copyright: Kerubin - kerubin.platform@gmail.com

WARNING: DO NOT CHANGE THIS CODE BECAUSE THE CHANGES WILL BE LOST IN THE NEXT CODE GENERATION.
***********************************************************************************************/


import { Component, OnInit } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import {MessageService} from 'primeng/api';

import { ElementRef, ViewChild } from '@angular/core';
import { Foto } from './foto.model';
import { FotoService } from './foto.service';
import { CadastrosFornecedorTranslationService } from './../i18n/cadastros-fornecedor-translation.service';

import { ProdutoService } from './../produto/produto.service';
import { Produto } from './../produto/produto.model';
import { ProdutoAutoComplete } from './../produto/produto.model';
import { MessageHandlerService } from 'src/app/core/message-handler.service';


@Component({
  selector: 'app-crud-foto',
  templateUrl: './crud-foto.component.html',
  styleUrls: ['./crud-foto.component.css']
})

export class FotoComponent implements OnInit {
	showHideHelp = false; // for show/hide help.
	
	foto = new Foto();
	fotoProdutoAutoCompleteSuggestions: ProdutoAutoComplete[];
	
	@ViewChild('foto_imagem_elementRef', {static: true}) fotoDefaultElementRef: ElementRef;
	
	constructor(
	    private fotoService: FotoService,
	    private cadastrosFornecedorTranslationService: CadastrosFornecedorTranslationService,
	    private produtoService: ProdutoService,
	    private route: ActivatedRoute,
	    private messageHandler: MessageHandlerService
	) { 
	}
	
	ngOnInit() {
	    const id = this.route.snapshot.params['id'];
	    if (id) {
	      this.getFotoById(id);
	    }
	    this.fotoDefaultElementSetFocus();
	}
	
	getShowHideHelpLabel(): string {
		return this.showHideHelp ? 'Ocultar ajuda' : 'Mostrar ajuda';
	}
	
	beginFormFoto(form: FormControl) {
	    form.reset();
	    setTimeout(function() {
	      this.foto = new Foto();
		  this.fotoDefaultElementSetFocus();
	    }.bind(this), 1);
	}
	
	validateAllFormFields(form: FormGroup) {
	    Object.keys(form.controls).forEach(field => {
	      const control = form.get(field);
	
	      if (control instanceof FormControl) {
	        control.markAsDirty({ onlySelf: true });
	      } else if (control instanceof FormGroup) {
	        this.validateAllFormFields(control);
	      }
	    });
	}
	
	saveFormFoto(form: FormGroup) {
		if (!form.valid) {
	      this.validateAllFormFields(form);
	      return;
	    }
	    if (this.isEditing) {
	      this.update();
	    } else {
	      this.create();
	    }
	}
	
	create() {
		
	    this.fotoService.create(this.foto)
	    .then((foto) => {
	      this.foto = foto;
	      this.messageHandler.showSuccess('Registro criado com sucesso!');
	      this.fotoDefaultElementSetFocus();
	    }).
	    catch(error => {
	      this.messageHandler.showError(error);
	    });
	}
	
	update() {
	    this.fotoService.update(this.foto)
	    .then((foto) => {
	      this.foto = foto;
	      this.messageHandler.showSuccess('Registro alterado!');
	      this.fotoDefaultElementSetFocus();
	    })
	    .catch(error => {
	      this.messageHandler.showError(error);
	    });
	}
	
	getFotoById(id: string) {
	    this.fotoService.retrieve(id)
	    .then((foto) => { 
	    	this.foto = foto;
	    })
	    .catch(error => {
	      this.messageHandler.showError(error);
	    });
	}
	
	get isEditing() {
	    return Boolean(this.foto.id);
	}
	
	
	
	fotoProdutoAutoCompleteClear(event) {
		// The autoComplete value has been reseted
		this.foto.produto = null;
	}
	
	fotoProdutoAutoCompleteOnBlur(event) {
		// Seems a PrimeNG bug, if clear an autocomplete field, on onBlur event, the null value is empty string.
		// Until PrimeNG version: 7.1.3.
		if (String(this.foto.produto) === '') {
			this.foto.produto = null;
		}
	}
	
	fotoProdutoAutoComplete(event) {
	    const query = event.query;
	    this.fotoService
	      .produtoProdutoAutoComplete(query)
	      .then((result) => {
	        this.fotoProdutoAutoCompleteSuggestions = result as ProdutoAutoComplete[];
	      })
	      .catch(error => {
	        this.messageHandler.showError(error);
	      });
	}
	
	fotoProdutoAutoCompleteFieldConverter(produto: ProdutoAutoComplete) {
		let text = '';
		if (produto) {
			if (produto.nome) {
			    if (text !== '') {
			      text += ' - ';
			    }
			    text += produto.nome; 
			}
			
		}
		
		if (text === '') {
			text = null;
		}
		return text;
	}
	
	
	// TODO: temporário, só para testes.
	getTranslation(key: string): string {
		const value = this.cadastrosFornecedorTranslationService.getTranslation(key);
		return value;
		
		// const result = key.substring(key.lastIndexOf('_') + 1);
		// return result;
	}
	
	
	
	
	
	
	
	
				
	fotoDefaultElementSetFocus() {
		try {
	    	this.fotoDefaultElementRef.nativeElement.focus();
	    } catch (error) {
	    	console.log('Error setting focus at fotoDefaultElementSetFocus:' + error);
	    }
	}
}
