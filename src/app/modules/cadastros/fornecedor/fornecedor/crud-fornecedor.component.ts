/**********************************************************************************************
Code generated by MKL Plug-in
Copyright: Kerubin - kerubin.platform@gmail.com

WARNING: DO NOT CHANGE THIS CODE BECAUSE THE CHANGES WILL BE LOST IN THE NEXT CODE GENERATION.
***********************************************************************************************/


import { Component, OnInit } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import {MessageService} from 'primeng/api';

import { ElementRef, ViewChild } from '@angular/core';
import { Fornecedor } from './fornecedor.model';
import { FornecedorService } from './fornecedor.service';
import { CadastrosFornecedorTranslationService } from './../i18n/cadastros-fornecedor-translation.service';
import * as moment from 'moment';

import { TipoPessoa } from './../enums/cadastros-fornecedor-enums.model';

import { UF } from './../enums/cadastros-fornecedor-enums.model';
import { SearchCEPService } from './../../../../searchcep/searchcep.service';
import { MessageHandlerService } from 'src/app/core/message-handler.service';


@Component({
  selector: 'app-crud-fornecedor',
  templateUrl: './crud-fornecedor.component.html',
  styleUrls: ['./crud-fornecedor.component.css']
})

export class FornecedorComponent implements OnInit {
	showHideHelp = false; // for show/hide help.
	
	
	calendarLocale: any;
	
	fornecedor = new Fornecedor();
	fornecedorTipoPessoaOptions: TipoPessoa[];
	
	
	fornecedorUfOptions: UF[];
	
	@ViewChild('nomeElementRef', {static: true}) defaultElementRef: ElementRef;
	
	constructor(
	    private fornecedorService: FornecedorService,
	    private cadastrosFornecedorTranslationService: CadastrosFornecedorTranslationService,
	    private route: ActivatedRoute,
	    private searchCEPService: SearchCEPService,
	    private messageHandler: MessageHandlerService
	) { 
		this.initializeFornecedorTipoPessoaOptions();
		
		this.initializeFornecedorUfOptions();
	}
	
	ngOnInit() {
		this.initLocaleSettings();
		this.initializeEnumFieldsWithDefault();
	    const id = this.route.snapshot.params['id'];
	    if (id) {
	      this.getFornecedorById(id);
	    }
	    this.defaultElementSetFocus();
	}
	
	getShowHideHelpLabel(): string {
		return this.showHideHelp ? 'Ocultar ajuda' : 'Mostrar ajuda';
	}
	
	begin(form: FormControl) {
	    form.reset();
	    setTimeout(function() {
	      this.fornecedor = new Fornecedor();
	      this.initializeEnumFieldsWithDefault();
		  this.defaultElementSetFocus();
	    }.bind(this), 1);
	}
	
	validateAllFormFields(form: FormGroup) {
	    Object.keys(form.controls).forEach(field => {
	      const control = form.get(field);
	
	      if (control instanceof FormControl) {
	        control.markAsDirty({ onlySelf: true });
	      } else if (control instanceof FormGroup) {
	        this.validateAllFormFields(control);
	      }
	    });
	}
	
	save(form: FormGroup) {
		if (!form.valid) {
	      this.validateAllFormFields(form);
	      return;
	    }
	    if (this.isEditing) {
	      this.update();
	    } else {
	      this.create();
	    }
	}
	create() {
		
	    this.fornecedorService.create(this.fornecedor)
	    .then((fornecedor) => {
	      this.fornecedor = fornecedor;
	      this.messageHandler.showSuccess('Registro criado com sucesso!');
	      this.defaultElementSetFocus();
	    }).
	    catch(error => {
	      this.messageHandler.showError(error);
	    });
	}
	
	update() {
	    this.fornecedorService.update(this.fornecedor)
	    .then((fornecedor) => {
	      this.fornecedor = fornecedor;
	      this.messageHandler.showSuccess('Registro alterado!');
	      this.defaultElementSetFocus();
	    })
	    .catch(error => {
	      this.messageHandler.showError(error);
	    });
	}
	
	getFornecedorById(id: string) {
	    this.fornecedorService.retrieve(id)
	    .then((fornecedor) => { 
	    	this.fornecedor = fornecedor;
	    })
	    .catch(error => {
	      this.messageHandler.showError(error);
	    });
	}
	
	get isEditing() {
	    return Boolean(this.fornecedor.id);
	}
	
	initializeEnumFieldsWithDefault() {
		this.fornecedor.tipoPessoa = this.fornecedorTipoPessoaOptions[1].value;
		this.fornecedor.uf = this.fornecedorUfOptions[24].value;
	}
	
	
	
	private initializeFornecedorTipoPessoaOptions() {
	    this.fornecedorTipoPessoaOptions = [
	    	{ label: 'Selecione um item', value: null },
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_tipoPessoa_pessoa_juridica'), value: 'PESSOA_JURIDICA' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_tipoPessoa_pessoa_fisica'), value: 'PESSOA_FISICA' }
	    ];
	}
	  
	private initializeFornecedorUfOptions() {
	    this.fornecedorUfOptions = [
	    	{ label: 'Selecione um item', value: null },
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_ac'), value: 'AC' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_al'), value: 'AL' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_ap'), value: 'AP' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_am'), value: 'AM' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_ba'), value: 'BA' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_ce'), value: 'CE' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_df'), value: 'DF' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_es'), value: 'ES' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_go'), value: 'GO' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_ma'), value: 'MA' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_mt'), value: 'MT' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_ms'), value: 'MS' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_mg'), value: 'MG' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_pa'), value: 'PA' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_pb'), value: 'PB' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_pr'), value: 'PR' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_pe'), value: 'PE' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_pi'), value: 'PI' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_rj'), value: 'RJ' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_rn'), value: 'RN' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_rs'), value: 'RS' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_ro'), value: 'RO' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_rr'), value: 'RR' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_sc'), value: 'SC' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_sp'), value: 'SP' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_se'), value: 'SE' }, 
	    	{ label: this.getTranslation('cadastros.fornecedor.fornecedor_uf_to'), value: 'TO' }
	    ];
	}
	  
	
	// TODO: temporário, só para testes.
	getTranslation(key: string): string {
		const value = this.cadastrosFornecedorTranslationService.getTranslation(key);
		return value;
		
		// const result = key.substring(key.lastIndexOf('_') + 1);
		// return result;
	}
	
	
	
										
	// Begin RuleWithSlotAppyHiddeComponent 
	
	ruleCnpjCPFAppyHiddeComponent() {
		const expression = (this.fornecedor.maisOpcoes === false);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}
	
	ruleIeRGAppyHiddeComponent() {
		const expression = (this.fornecedor.maisOpcoes === false);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}
	
	ruleDataFundacaoNascimentoAppyHiddeComponent() {
		const expression = (this.fornecedor.maisOpcoes === false);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}
	
	ruleNomeContatoAppyHiddeComponent() {
		const expression = (this.fornecedor.maisOpcoes === false);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}
	
	ruleFoneAppyHiddeComponent() {
		const expression = (this.fornecedor.maisOpcoes === false);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}
	
	ruleCelularAppyHiddeComponent() {
		const expression = (this.fornecedor.maisOpcoes === false);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}
	
	ruleEmailAppyHiddeComponent() {
		const expression = (this.fornecedor.maisOpcoes === false);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}
	
	ruleSiteAppyHiddeComponent() {
		const expression = (this.fornecedor.maisOpcoes === false);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}
	
	ruleCepAppyHiddeComponent() {
		const expression = (this.fornecedor.maisOpcoes === false);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}
	
	ruleUfAppyHiddeComponent() {
		const expression = (this.fornecedor.maisOpcoes === false);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}
	
	ruleCidadeAppyHiddeComponent() {
		const expression = (this.fornecedor.maisOpcoes === false);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}
	
	ruleBairroAppyHiddeComponent() {
		const expression = (this.fornecedor.maisOpcoes === false);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}
	
	ruleEnderecoAppyHiddeComponent() {
		const expression = (this.fornecedor.maisOpcoes === false);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}
	
	ruleNumeroAppyHiddeComponent() {
		const expression = (this.fornecedor.maisOpcoes === false);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}
	
	ruleComplementoAppyHiddeComponent() {
		const expression = (this.fornecedor.maisOpcoes === false);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}
	
	ruleObservacoesAppyHiddeComponent() {
		const expression = (this.fornecedor.maisOpcoes === false);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}
	
	ruleAtivoAppyHiddeComponent() {
		const expression = (this.fornecedor.maisOpcoes === false);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}
	// End Begin RuleWithSlotAppyHiddeComponent
	
	
	
	
	initLocaleSettings() {
		this.calendarLocale = this.cadastrosFornecedorTranslationService.getCalendarLocaleSettings();
	}
	
	
	searchCEP() {
	    let cep = this.fornecedor.cep;
	    if (cep) {
	      cep = cep.trim().replace('-', '');
	    }
	
	    if (!cep || cep.length !== 8) {
	      this.messageHandler.showError(`CEP '${this.fornecedor.cep}' inválido para busca.`);
	      return;
	    }
	
	    this.searchCEPService.searchCEP(cep)
	    .then(result => {
	      this.clearSearchCEPData();
	      if (result.erro) {
	        this.messageHandler.showError(`CEP '${this.fornecedor.cep}' não encontrado.`);
	        return;
	      }
	      this.fornecedor.cep = result.cep;
	      const uf = this.fornecedorUfOptions.find(it => it.value === result.uf);
	
	      this.fornecedor.uf = uf ? uf.value : null;
	      this.fornecedor.cidade = result.localidade;
	      this.fornecedor.bairro = result.bairro;
	      this.fornecedor.endereco = result.logradouro;
	      this.fornecedor.complemento = result.complemento;
	    })
	    .catch(e => {
	      this.clearSearchCEPData();
	      this.messageHandler.showError('Erro ao buscar CEP. Verifique se você informou um CEP válido.');
	    });
	
	  }
	
	  clearSearchCEPData() {
	    this.fornecedor.uf = null;
	    this.fornecedor.cidade = null;
	    this.fornecedor.bairro = null;
	    this.fornecedor.endereco = null;
	    this.fornecedor.complemento = null;
	  }
	
				
	defaultElementSetFocus() {
		try {
	    	this.defaultElementRef.nativeElement.focus();
	    } catch (error) {
	    	console.log('Error setting focus at defaultElementSetFocus:' + error);
	    }
	}
}
