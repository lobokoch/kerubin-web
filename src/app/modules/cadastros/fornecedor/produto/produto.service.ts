/**********************************************************************************************
Code generated by MKL Plug-in
Copyright: Kerubin - kerubin.platform@gmail.com

WARNING: DO NOT CHANGE THIS CODE BECAUSE THE CHANGES WILL BE LOST IN THE NEXT CODE GENERATION.
***********************************************************************************************/


import { Injectable } from '@angular/core';
import { HttpParams } from '@angular/common/http';
import * as moment from 'moment';

import { HttpClientWithToken } from '../../../../security/http-client-token';

import { Produto } from './produto.model';
import { ProdutoAutoComplete } from './produto.model';
import { Foto, FotoDTO } from './../foto/foto.model';
import { ProdutoListFilter } from './produto.model';
import { AnalyticsService } from './../../../../analitycs/analytics.service';
import { environment } from 'src/environments/environment';
import { FotoAutoComplete } from './../foto/foto.model';

@Injectable()
export class ProdutoService {


  url = environment.apiUrl + '/cadastros/fornecedor/entities/produto';
  url2 = environment.apiUrl + '/cadastros/fornecedor/entities/produto2';

  getUrlProdutoFotosUpload(produtoId: string) {
    return `${this.url2}/produtoFotosUpload/${produtoId}`;
  }


  constructor(
    private analitycs: AnalyticsService,
    private http: HttpClientWithToken) {
    // Generated code.
  }

  // TODO: Provis√≥rio
  private getHeaders(): Headers {
    const headers = new Headers();

    headers.append('Content-Type', 'application/json');
    return headers;
  }

  create(produto: Produto): Promise<Produto> {
    const headers = this.getHeaders();
    this.analitycs.sendEvent('cadastros.fornecedor.Produto', 'create', 'create Produto');
    return this.http.post(this.url, produto, { headers })
      .toPromise()
      .then(response => {
        const created = response as Produto;
        this.adjustNullEntitySlots([created]);
        return created;
      });
  }

  update(produto: Produto): Promise<Produto> {
    const headers = this.getHeaders();
    this.analitycs.sendEvent('cadastros.fornecedor.Produto', 'update', 'update Produto');
    return this.http.put(`${this.url}/${produto.id}`, produto, { headers })
      .toPromise()
      .then(response => {
        const updated = response as Produto;
        this.adjustNullEntitySlots([updated]);
        return updated;
      });
  }

  delete(id: string): Promise<void> {
    this.analitycs.sendEvent('cadastros.fornecedor.Produto', 'delete', 'delete Produto');
    return this.http.delete(`${this.url}/${id}`)
      .toPromise()
      .then(() => null);
  }

  retrieve(id: string): Promise<Produto> {
    this.analitycs.sendEvent('cadastros.fornecedor.Produto', 'retrieve', 'retrieve Produto');
    const headers = this.getHeaders();
    return this.http.get<Produto>(`${this.url}/${id}`, { headers })
      .toPromise()
      .then(response => {
        const produto = response as Produto;
        this.adjustNullEntitySlots([produto]);
        return produto;
      });
  }

  getProdutoFoto(fotoId: string): Promise<FotoDTO> {
    this.analitycs.sendEvent('cadastros.fornecedor.getProdutoFoto', 'retrieve', 'retrieve Produto');
    const headers = this.getHeaders();
    return this.http.get<FotoDTO>(`${this.url2}/getProdutoFoto/${fotoId}`, { headers })
      .toPromise()
      .then(response => {
        return response as FotoDTO;
      });
  }

  deleteProdutoFotosItem(fotoId: string): Promise<void> {
    this.analitycs.sendEvent('cadastros.fornecedor.Produto.fotos', 'delete', 'delete fotos item from Produto');
    return this.http.delete(`${this.url2}/deleteProdutoFotosItem/${fotoId}`)
      .toPromise()
      .then(() => null);
  }

  uploadProdutoFotoAndGet(produtoId: string, foto: File): Promise<FotoDTO> {
    const formData: FormData = new FormData();
    formData.append('foto', foto, foto.name);

    const headers = this.getHeaders();
    this.analitycs.sendEvent('cadastros.fornecedor.Produto', 'uploadProdutoFoto', 'upload Produto Fotos');
    return this.http.post<FotoDTO>(`${this.url2}/uploadProdutoFotoAndGet/${produtoId}`, formData/*, { headers }*/)
      .toPromise()
      .then(response => {
        return response as FotoDTO;
      });
  }


  private adjustNullEntitySlots(entityList: Produto[]) {
		/*entityList.forEach(produto => {
		      if (!produto.fotos) {
		        produto.fotos = new Foto();
		      }

		});*/
  }

  autoComplete(query: string): Promise<ProdutoAutoComplete[]> {
    const headers = this.getHeaders();

    let params = new HttpParams();
    params = params.set('query', query);
    this.analitycs.sendEvent('cadastros.fornecedor.Produto', 'autoComplete', JSON.stringify(params));
    return this.http.get<ProdutoAutoComplete[]>(`${this.url}/autoComplete`, { headers, params })
      .toPromise()
      .then(response => {
        const result = response as ProdutoAutoComplete[];
        return result;
      });

  }


  // Begin relationships autoComplete

  fotoFotosAutoComplete(query: string): Promise<FotoAutoComplete[]> {
    const headers = this.getHeaders();

    let params = new HttpParams();
    params = params.set('query', query);
    this.analitycs.sendEvent('cadastros.fornecedor.Foto', 'fotoFotosAutoComplete', JSON.stringify(params));
    return this.http.get<FotoAutoComplete[]>(`${this.url}/fotoFotosAutoComplete`, { headers, params })
      .toPromise()
      .then(response => {
        const result = response as FotoAutoComplete[];
        return result;
      });

  }

  // End relationships autoComplete



  produtoList(produtoListFilter: ProdutoListFilter): Promise<any> {
    const headers = this.getHeaders();

    const params = this.mountAndGetSearchParams(produtoListFilter);
    this.analitycs.sendEvent('cadastros.fornecedor.Produto', 'produtoList', JSON.stringify(params));
    return this.http.get<any>(this.url, { headers, params })
      .toPromise()
      .then(response => {
        const data = response;
        const items = data.content; /* array of Produto */
        const totalElements = data.totalElements;

        this.adjustNullEntitySlots(items);

        const result = {
          items,
          totalElements
        };

        return result;
      });
  }


  mountAndGetSearchParams(filter: ProdutoListFilter): HttpParams {
    let params = new HttpParams();
    if (filter.pageNumber) {
      params = params.set('page', filter.pageNumber.toString());
    }

    if (filter.pageSize) {
      params = params.set('size', filter.pageSize.toString());
    }


    // customParams
    if (filter.customParams && filter.customParams.size > 0) {
      const value = this.mapToJson(filter.customParams);
      params = params.set('customParams', value);
    }

    // Sort
    if (filter.sortFields) {
      // search/nameStartsWith?name=K&sort=name,asc&sort=value,desc

      filter.sortFields.forEach(sortField => {
        const sortValue = `${sortField.field},${sortField.order > 0 ? 'asc' : 'desc'}`;
        params = params.append('sort', sortValue);
      });
    }

    return params;
  }

  mapToJson(someMap: Map<string, any>) {
    return JSON.stringify(this.mapToObj(someMap));
  }

  mapToObj(someMap: Map<string, any>) {
    const obj = Object.create(null);
    someMap.forEach((value, key) => {
      obj[key] = value;
    });
    return obj;
  }

  dateToStr(data: Date): string {
    return moment(data).format('YYYY-MM-DD');
  }

	/*** TODO: avaliar se vai ser feito isso.
	replicateProduto(id: string, groupId: string, quantity: number): Promise<boolean> {
	    const headers = this.getHeaders();

	    const payload = new ReplicateProdutoPayload(id, quantity, groupId);
	    return this.http.post(`${this.url}/replicateProduto`, payload, { headers } )
	    .toPromise()
	    .then(response => {
	      return response === true;
	    });
	}

	getTotaisfilterProduto(filter: ProdutorListFilter): Promise<TotaisfilterProduto> {
	    const headers = this.getHeaders();

	    const params = this.mountAndGetSearchParams(filter);
		this.analitycs.sendEvent('cadastros.fornecedor.Produto', 'getTotaisfilterProduto', JSON.stringify(params));
	    return this.http.get<TotaisfilterProduto>(`${this.url}/getTotaisfilterProduto`, { headers, params })
	    .toPromise()
	    .then(response => {
	      const result = response as TotaisfilterProduto;
	      return result;
	    });
	}
	*/
}

