/**********************************************************************************************
Code generated by MKL Plug-in
Copyright: Kerubin - kerubin.platform@gmail.com

WARNING: DO NOT CHANGE THIS CODE BECAUSE THE CHANGES WILL BE LOST IN THE NEXT CODE GENERATION.
***********************************************************************************************/


import { Injectable } from '@angular/core';
import { HttpParams } from '@angular/common/http';
import * as moment from 'moment';

import { HttpClientWithToken } from '../../../../security/http-client-token';

import { ContaPagarMultiple } from './contapagarmultiple.model';
import { ContaPagarMultipleAutoComplete } from './contapagarmultiple.model';
import { Fornecedor } from './../fornecedor/fornecedor.model';
import { ContaBancaria } from './../contabancaria/contabancaria.model';
import { CartaoCredito } from './../cartaocredito/cartaocredito.model';
import { PlanoConta } from './../planoconta/planoconta.model';
import { ContaPagar } from './../contapagar/contapagar.model';
import { ContaPagarMultipleListFilter } from './contapagarmultiple.model';
import { ContaPagarMultipleSumFields } from './contapagarmultiple.model';
import { AnalyticsService } from './../../../../analitycs/analytics.service';
import { environment } from 'src/environments/environment';
import { FornecedorAutoComplete } from './../fornecedor/fornecedor.model';
import { ContaBancariaAutoComplete } from './../contabancaria/contabancaria.model';
import { CartaoCreditoAutoComplete } from './../cartaocredito/cartaocredito.model';
import { PlanoContaAutoComplete } from './../planoconta/planoconta.model';
import { ContaPagarAutoComplete } from './../contapagar/contapagar.model';

@Injectable()
export class ContaPagarMultipleService {

	url = environment.apiUrl + '/financeiro/contas_pagar/entities/contaPagarMultiple';

	constructor(
		private analitycs: AnalyticsService,
		private http: HttpClientWithToken) {
		// Generated code.
	}

	// TODO: Provis√≥rio
	private getHeaders(): Headers {
		const headers = new Headers();

	    headers.append('Content-Type', 'application/json');
	    return headers;
	}

	create(contaPagarMultiple: ContaPagarMultiple): Promise<ContaPagarMultiple> {
		const headers = this.getHeaders();
		this.analitycs.sendEvent('financeiro.contas_pagar.ContaPagarMultiple', 'create', 'create ContaPagarMultiple');
	    return this.http.post(this.url, contaPagarMultiple, { headers })
	    .toPromise()
	    .then(response => {
	      const created = response as ContaPagarMultiple;
	      this.adjustNullEntitySlots([created]);
	      this.adjustEntityDates([created]);
	      return created;
	    });
	}

	update(contaPagarMultiple: ContaPagarMultiple): Promise<ContaPagarMultiple> {
	    const headers = this.getHeaders();
		this.analitycs.sendEvent('financeiro.contas_pagar.ContaPagarMultiple', 'update', 'update ContaPagarMultiple');
	    return this.http.put(`${this.url}/${contaPagarMultiple.id}`, contaPagarMultiple, { headers })
	    .toPromise()
	    .then(response => {
	      const updated = response as ContaPagarMultiple;
	      this.adjustNullEntitySlots([updated]);
	      this.adjustEntityDates([updated]);
	      return updated;
	    });
	}

	delete(id: string): Promise<void> {
		this.analitycs.sendEvent('financeiro.contas_pagar.ContaPagarMultiple', 'delete', 'delete ContaPagarMultiple');
	    return this.http.delete(`${this.url}/${id}`)
	    .toPromise()
	    .then(() => null);
	}
	
	retrieve(id: string): Promise<ContaPagarMultiple> {
		this.analitycs.sendEvent('financeiro.contas_pagar.ContaPagarMultiple', 'retrieve', 'retrieve ContaPagarMultiple');
	    const headers = this.getHeaders();
	    return this.http.get<ContaPagarMultiple>(`${this.url}/${id}`, { headers })
	    .toPromise()
	    .then(response => {
	      const contaPagarMultiple = response as ContaPagarMultiple;
	      this.adjustNullEntitySlots([contaPagarMultiple]);
	      this.adjustEntityDates([contaPagarMultiple]);
	      return contaPagarMultiple;
	    });
	}


	private adjustEntityDates(entityList: ContaPagarMultiple[]) {
		entityList.forEach(contaPagarMultiple => {
		      if (contaPagarMultiple.dataPagamento) {
		        contaPagarMultiple.dataPagamento = moment(contaPagarMultiple.dataPagamento, 'YYYY-MM-DD').toDate();
		      }

		});
	}

	private adjustNullEntitySlots(entityList: ContaPagarMultiple[]) {
		/*entityList.forEach(contaPagarMultiple => {
		      if (!contaPagarMultiple.fornecedor) {
		        contaPagarMultiple.fornecedor = new Fornecedor();
		      }


		      if (!contaPagarMultiple.contaBancaria) {
		        contaPagarMultiple.contaBancaria = new ContaBancaria();
		      }


		      if (!contaPagarMultiple.cartaoCredito) {
		        contaPagarMultiple.cartaoCredito = new CartaoCredito();
		      }


		      if (!contaPagarMultiple.planoContas) {
		        contaPagarMultiple.planoContas = new PlanoConta();
		      }


		      if (!contaPagarMultiple.contaPagar) {
		        contaPagarMultiple.contaPagar = new ContaPagar();
		      }

		});*/
	}

	autoComplete(query: string): Promise<ContaPagarMultipleAutoComplete[]> {
	    const headers = this.getHeaders();

	    let params = new HttpParams();
	    params = params.set('query', query);
		this.analitycs.sendEvent('financeiro.contas_pagar.ContaPagarMultiple', 'autoComplete', JSON.stringify(params));
	    return this.http.get<ContaPagarMultipleAutoComplete[]>(`${this.url}/autoComplete`, { headers, params })
	      .toPromise()
	      .then(response => {
	        const result = response as ContaPagarMultipleAutoComplete[];
	        return result;
	      });

	}


	// Begin relationships autoComplete

	fornecedorFornecedorAutoComplete(query: string): Promise<FornecedorAutoComplete[]> {
	    const headers = this.getHeaders();

	    let params = new HttpParams();
	    params = params.set('query', query);
		this.analitycs.sendEvent('financeiro.contas_pagar.Fornecedor', 'fornecedorFornecedorAutoComplete', JSON.stringify(params));
	    return this.http.get<FornecedorAutoComplete[]>(`${this.url}/fornecedorFornecedorAutoComplete`, { headers, params })
	      .toPromise()
	      .then(response => {
	        const result = response as FornecedorAutoComplete[];
	        return result;
	      });

	}


	contaBancariaContaBancariaAutoComplete(query: string): Promise<ContaBancariaAutoComplete[]> {
	    const headers = this.getHeaders();

	    let params = new HttpParams();
	    params = params.set('query', query);
		this.analitycs.sendEvent('financeiro.contas_pagar.ContaBancaria', 'contaBancariaContaBancariaAutoComplete', JSON.stringify(params));
	    return this.http.get<ContaBancariaAutoComplete[]>(`${this.url}/contaBancariaContaBancariaAutoComplete`, { headers, params })
	      .toPromise()
	      .then(response => {
	        const result = response as ContaBancariaAutoComplete[];
	        return result;
	      });

	}


	cartaoCreditoCartaoCreditoAutoComplete(query: string): Promise<CartaoCreditoAutoComplete[]> {
	    const headers = this.getHeaders();

	    let params = new HttpParams();
	    params = params.set('query', query);
		this.analitycs.sendEvent('financeiro.contas_pagar.CartaoCredito', 'cartaoCreditoCartaoCreditoAutoComplete', JSON.stringify(params));
	    return this.http.get<CartaoCreditoAutoComplete[]>(`${this.url}/cartaoCreditoCartaoCreditoAutoComplete`, { headers, params })
	      .toPromise()
	      .then(response => {
	        const result = response as CartaoCreditoAutoComplete[];
	        return result;
	      });

	}


	planoContaPlanoContasAutoComplete(query: string): Promise<PlanoContaAutoComplete[]> {
	    const headers = this.getHeaders();

	    let params = new HttpParams();
	    params = params.set('query', query);
		this.analitycs.sendEvent('financeiro.contas_pagar.PlanoConta', 'planoContaPlanoContasAutoComplete', JSON.stringify(params));
	    return this.http.get<PlanoContaAutoComplete[]>(`${this.url}/planoContaPlanoContasAutoComplete`, { headers, params })
	      .toPromise()
	      .then(response => {
	        const result = response as PlanoContaAutoComplete[];
	        return result;
	      });

	}


	contaPagarContaPagarAutoComplete(query: string): Promise<ContaPagarAutoComplete[]> {
	    const headers = this.getHeaders();

	    let params = new HttpParams();
	    params = params.set('query', query);
		this.analitycs.sendEvent('financeiro.contas_pagar.ContaPagar', 'contaPagarContaPagarAutoComplete', JSON.stringify(params));
	    return this.http.get<ContaPagarAutoComplete[]>(`${this.url}/contaPagarContaPagarAutoComplete`, { headers, params })
	      .toPromise()
	      .then(response => {
	        const result = response as ContaPagarAutoComplete[];
	        return result;
	      });

	}

	// End relationships autoComplete



	contaPagarMultipleList(contaPagarMultipleListFilter: ContaPagarMultipleListFilter): Promise<any> {
	    const headers = this.getHeaders();

	    const params = this.mountAndGetSearchParams(contaPagarMultipleListFilter);
		this.analitycs.sendEvent('financeiro.contas_pagar.ContaPagarMultiple', 'contaPagarMultipleList', JSON.stringify(params));
	    return this.http.get<any>(this.url, { headers, params })
	      .toPromise()
	      .then(response => {
	        const data = response;
	        const items = data.content; /* array of ContaPagarMultiple */
	        const totalElements = data.totalElements;

	        this.adjustNullEntitySlots(items);
	        this.adjustEntityDates(items);

	        const result = {
	          items,
	          totalElements
	        };

	        return result;
	      });
	}


	getContaPagarMultipleSumFields(contaPagarMultipleListFilter: ContaPagarMultipleListFilter): Promise<ContaPagarMultipleSumFields> {
	    const headers = this.getHeaders();
		const params = this.mountAndGetSearchParams(contaPagarMultipleListFilter);
	    this.analitycs.sendEvent('financeiro.contas_pagar.ContaPagarMultiple', 'getContaPagarMultipleSumFields', JSON.stringify(params));
		return this.http.get<any>(`${this.url}/contaPagarMultipleSumFields`, { headers, params })
		  .toPromise()
		  .then(response => {
		    const result = response;
		    return result;
		  });
	}

	mountAndGetSearchParams(filter: ContaPagarMultipleListFilter): HttpParams {
	    let params = new HttpParams();
	    if (filter.pageNumber) {
	      params = params.set('page', filter.pageNumber.toString());
	    }

	    if (filter.pageSize) {
	      params = params.set('size', filter.pageSize.toString());
	    }
		
		// contaPagarId
		if (filter.contaPagarId) {
			const value = filter.contaPagarId;
			params = params.set('contaPagarId', value);
		}
		
		// customParams
		if (filter.customParams && filter.customParams.size > 0) {
			const value = this.mapToJson(filter.customParams);
			params = params.set('customParams', value);
		}

	    // Sort
	    if (filter.sortFields) {
	      // search/nameStartsWith?name=K&sort=name,asc&sort=value,desc

			filter.sortFields.forEach(sortField => {
				const sortValue = `${sortField.field},${sortField.order > 0 ? 'asc' : 'desc'}`;
				params = params.append('sort', sortValue);
			});
	    }

	    return params;
	}

 	mapToJson(someMap: Map<string, any>) {
      return JSON.stringify(this.mapToObj(someMap));
    }

    mapToObj(someMap: Map<string, any>) {
      const obj = Object.create(null);
      someMap.forEach((value, key) => {
        obj[key] = value;
      });
      return obj;
    }

	dateToStr(data: Date): string {
	    return moment(data).format('YYYY-MM-DD');
	}

	/*** TODO: avaliar se vai ser feito isso.
	replicateContaPagarMultiple(id: string, groupId: string, quantity: number): Promise<boolean> {
	    const headers = this.getHeaders();

	    const payload = new ReplicateContaPagarMultiplePayload(id, quantity, groupId);
	    return this.http.post(`${this.url}/replicateContaPagarMultiple`, payload, { headers } )
	    .toPromise()
	    .then(response => {
	      return response === true;
	    });
	}

	getTotaisfilterContaPagarMultiple(filter: ContaPagarMultiplerListFilter): Promise<TotaisfilterContaPagarMultiple> {
	    const headers = this.getHeaders();

	    const params = this.mountAndGetSearchParams(filter);
		this.analitycs.sendEvent('financeiro.contas_pagar.ContaPagarMultiple', 'getTotaisfilterContaPagarMultiple', JSON.stringify(params));
	    return this.http.get<TotaisfilterContaPagarMultiple>(`${this.url}/getTotaisfilterContaPagarMultiple`, { headers, params })
	    .toPromise()
	    .then(response => {
	      const result = response as TotaisfilterContaPagarMultiple;
	      return result;
	    });
	}
	*/
}

