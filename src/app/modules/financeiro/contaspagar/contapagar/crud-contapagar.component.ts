/**********************************************************************************************
Code generated by MKL Plug-in
Copyright: Kerubin - kerubin.platform@gmail.com

WARNING: DO NOT CHANGE THIS CODE BECAUSE THE CHANGES WILL BE LOST IN THE NEXT CODE GENERATION.
***********************************************************************************************/


import { Component, OnInit } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { MessageService, MenuItem } from 'primeng/api';

import { ElementRef, ViewChild } from '@angular/core';
import { ContaPagar } from './contapagar.model';
import { ContaPagarService } from './contapagar.service';
import { CustomContaPagarService } from './custom-contapagar.service';
import { FinanceiroContasPagarTranslationService } from './../i18n/financeiro-contaspagar-translation.service';
import * as moment from 'moment';

import { PlanoContaService } from './../planoconta/planoconta.service';
import { PlanoConta } from './../planoconta/planoconta.model';
import { PlanoContaAutoComplete } from './../planoconta/planoconta.model';

import { ContaBancariaService } from './../contabancaria/contabancaria.service';
import { ContaBancaria } from './../contabancaria/contabancaria.model';
import { ContaBancariaAutoComplete } from './../contabancaria/contabancaria.model';

import { CartaoCreditoService } from './../cartaocredito/cartaocredito.service';
import { CartaoCredito } from './../cartaocredito/cartaocredito.model';
import { CartaoCreditoAutoComplete } from './../cartaocredito/cartaocredito.model';

import { FornecedorService } from './../fornecedor/fornecedor.service';
import { Fornecedor } from './../fornecedor/fornecedor.model';
import { FornecedorAutoComplete } from './../fornecedor/fornecedor.model';

import { FormaPagamento } from './../enums/financeiro-contaspagar-enums.model';
import {SelectItem, ConfirmationService} from 'primeng/api';
import { MessageHandlerService } from 'src/app/core/message-handler.service';

import { ContaPagarMultipleListComponent } from './../contapagarmultiple/list-contapagarmultiple.component';
import { ContaPagarMultiple } from './../contapagarmultiple/contapagarmultiple.model';
import { ContaPagarMultipleComponent } from './../contapagarmultiple/crud-contapagarmultiple.component';

const TIPO_PAGAMENTO_SINGLE = 'SINGLE';
const TIPO_PAGAMENTO_MULTIPLE = 'MULTIPLE';

// const TIPO_PAGAMENTO_SINGLE = { label: 'Pagamento único', value: 'SINGLE' };
// const TIPO_PAGAMENTO_MULTIPLE = { label: 'Pagamentos múltiplos', value: 'MULTIPLE' };

@Component({
  selector: 'app-crud-contapagar',
  templateUrl: './crud-contapagar.component.html',
  styleUrls: ['./crud-contapagar.component.css']
})


export class ContaPagarComponent implements OnInit {

 displayDialogMultipleCrud = false;
 contaPagarMultipleCanEdit = false;
 contaPagarMultipleCanDelete = false;


  contaPagamento = false;

  tiposPagamentos: SelectItem[];

	showHideHelp = false; // for show/hide help.


	calendarLocale: any;


	numberOfCopies = 1;
	copiesReferenceFieldInterval = 30;

	copiesReferenceFieldOptions: SelectItem[];
	copiesReferenceField: SelectItem = { label: 'Data de vencimento', value: 'dataVencimento' };
	copiesReferenceFieldSelected: SelectItem;

	contaPagar = new ContaPagar();
	contaPagarPlanoContasAutoCompleteSuggestions: PlanoContaAutoComplete[];


	contaPagarContaBancariaAutoCompleteSuggestions: ContaBancariaAutoComplete[];


	contaPagarCartaoCreditoAutoCompleteSuggestions: CartaoCreditoAutoComplete[];


	contaPagarFornecedorAutoCompleteSuggestions: FornecedorAutoComplete[];
	contaPagarFormaPagamentoOptions: FormaPagamento[];

	@ViewChild('descricaoElementRef', {static: true}) defaultElementRef: ElementRef;
	@ViewChild('contaPagarMultipleRef', {static: true}) contaPagarMultipleCrud: ContaPagarMultipleComponent;
	@ViewChild('contaPagarMultipleDataGridRef') contaPagarMultipleList: ContaPagarMultipleListComponent;

	constructor(
	    private contaPagarService: ContaPagarService,
	    private customContaPagarService: CustomContaPagarService,
	    private financeiroContasPagarTranslationService: FinanceiroContasPagarTranslationService,
	    private planoContaService: PlanoContaService,


	    private contaBancariaService: ContaBancariaService,


	    private cartaoCreditoService: CartaoCreditoService,


	    private fornecedorService: FornecedorService,
	    private route: ActivatedRoute,
	    private confirmation: ConfirmationService,
	    private messageHandler: MessageHandlerService
	) {
    this.contaPagar = new ContaPagar();

		this.customContaPagarService.setComponent(this);

		// Begin custom action.
		if (!this.customContaPagarService.beforeConstructor()) {
			return;
		}
		// End custom action.

		this.initializeContaPagarFormaPagamentoOptions();
    this.initializeCopiesReferenceFieldOptions();

    this.initializeTiposPagamentosOptions();

		// Begin custom action.
		if (!this.customContaPagarService.afterConstructor()) {
			return;
		}
		// End custom action.

	}

	ngOnInit() {
		// Begin custom action.
		if (!this.customContaPagarService.beforeOnInit()) {
			return;
		}
		// End custom action.

		this.initLocaleSettings();
		this.initializeEnumFieldsWithDefault();
	    const id = this.route.snapshot.params['id'];
	    if (id) {
	      this.getContaPagarById(id);
      }

      // this.tipoPagamentoSelected = this.tiposPagamentos[0].value;

	    // Begin custom action.
	    if (!this.customContaPagarService.afterOnInit()) {
	    	return;
	    }
	    // End custom action.

	    this.defaultElementSetFocus();
	}

	getShowHideHelpLabel(): string {
		return this.showHideHelp ? 'Ocultar ajuda' : 'Mostrar ajuda';
	}

	begin(form: FormControl) {
	    form.reset();
	    setTimeout(function() {

	    	// Begin custom action.
	    	if (!this.customContaPagarService.beforeOnNewRecord()) {
	    		return;
	    	}
	    	// End custom action.

	      this.contaPagar = new ContaPagar();
        this.initializeEnumFieldsWithDefault();
        this.initializeTiposPagamentosOptions();

		  // Begin custom action.
		  if (!this.customContaPagarService.afterOnNewRecord()) {
		  	return;
		  }
		  // End custom action.

		  this.defaultElementSetFocus();
	    }.bind(this), 1);
	}

	validateAllFormFields(form: FormGroup) {
	    Object.keys(form.controls).forEach(field => {
	      const control = form.get(field);

	      if (control instanceof FormControl) {
	        control.markAsDirty({ onlySelf: true });
	      } else if (control instanceof FormGroup) {
	        this.validateAllFormFields(control);
	      }
	    });
	}

	save(form: FormGroup) {
		if (!form.valid) {
	      this.validateAllFormFields(form);
	      return;
      }

    // Validação para pagamentos múltiplos
    const isMultiple = this.contaPagar.tipoPagamento === TIPO_PAGAMENTO_MULTIPLE;
    const isPaga = this.contaPagar.contaPaga;
    const hasMultipleItems = this.contaPagarMultipleList.contaPagarMultipleListItems.length > 0;
    if (isMultiple) {
      if (!hasMultipleItems && isPaga) {
        this.messageHandler.showError('Esta conta não pode ser marcada como \"Conta Paga\", porque ela não possui nenhum pagamento informado.');
        this.contaPagar.contaPaga = false;
        return;
      }

      if (this.contaPagarMultipleList.contaPagarMultipleSumFields) {
        this.contaPagar.valorPago = this.contaPagarMultipleList.contaPagarMultipleSumFields.sumValorPago;
      } else {
        console.log('this.contaPagarMultipleList.contaPagarMultipleSumFields = NULL');
      }
    }
    /////

		if (!this.doRulesFormBeforeSave()) {
			return;
		}



		// Begin custom action.
		if (!this.customContaPagarService.beforeSave()) {
			return;
		}
		// End custom action.

    this.contaPagar.dataPagamento = this.adjustDate(this.contaPagar.dataPagamento);
	  if (this.isEditing) {
	      this.update();
	    } else {
	      this.create();
	    }
		this.initializeCopiesReferenceFieldOptions();

		// Begin custom action.
		if (!this.customContaPagarService.afterSave()) {
			return;
		}
		// End custom action.

	}

	// Begin rulesFormBeforeSave
	doRulesFormBeforeSave(): boolean {

		if ((this.contaPagar.contaPaga) && !this.contaPagar.dataPagamento) {
			this.messageHandler.showError('A data do pagamento deve ser informada para poder pagar a conta.');
			return false;
		}


		if ((this.contaPagar.contaPaga) && moment(this.contaPagar.dataPagamento).isAfter(moment({h: 0, m: 0, s: 0, ms: 0}), 'day')) {
			this.messageHandler.showError(`A data do pagamento não pode ser maior do que a data de hoje (${moment().format('DD/MM/YYYY')}).`);
			return false;
		}


		if ((this.contaPagar.contaPaga) && !this.contaPagar.valorPago) {
			this.messageHandler.showError('O valor total pago deve ser informado para poder pagar a conta.');
			return false;
		}

		return true;
	}
	// End rulesFormBeforeSave

	create() {

		// Begin custom action.
		if (!this.customContaPagarService.beforeCreate()) {
			return;
		}
		// End custom action.


	    this.contaPagarService.create(this.contaPagar)
	    .then((contaPagar) => {
	      this.contaPagar = contaPagar;
	      this.messageHandler.showSuccess('Registro criado com sucesso!');

	      // Begin custom action.
	      if (!this.customContaPagarService.afterCreate()) {
	      	return;
	      }
	      // End custom action.

	      this.defaultElementSetFocus();
	    }).
	    catch(error => {
	      this.messageHandler.showError(error);
	    });
	}

	update() {

		// Begin custom action.
		if (!this.customContaPagarService.beforeUpdate()) {
			return;
		}
		// End custom action.
	    this.contaPagarService.update(this.contaPagar)
	    .then((contaPagar) => {
	      this.contaPagar = contaPagar;
	      this.messageHandler.showSuccess('Registro alterado!');

	      // Begin custom action.
	      if (!this.customContaPagarService.afterUpdate()) {
	      	return;
	      }
	      // End custom action.

	      this.defaultElementSetFocus();
	    })
	    .catch(error => {
	      this.messageHandler.showError(error);
	    });
	}

	getContaPagarById(id: string) {

		// Begin custom action.
		if (!this.customContaPagarService.beforeGetById(id)) {
			return;
		}
		// End custom action.

	    this.contaPagarService.retrieve(id)
	    .then((contaPagar) => {
	    	this.contaPagar = contaPagar;

	    	// Begin custom action.
	    	if (!this.customContaPagarService.afterGetById(id)) {
	    		return;
	    	}
	    	// End custom action.

	    })
	    .catch(error => {
	      this.messageHandler.showError(error);
	    });
	}

	get isEditing() {
	    return Boolean(this.contaPagar.id);
	}

	initializeEnumFieldsWithDefault() {
		this.contaPagar.formaPagamento = this.contaPagarFormaPagamentoOptions[1].value;
	}


	contaPagarPlanoContasAutoCompleteClear(event) {
		// The autoComplete value has been reseted
		this.contaPagar.planoContas = null;
	}

	contaPagarPlanoContasAutoCompleteOnBlur(event) {
		// Seems a PrimeNG bug, if clear an autocomplete field, on onBlur event, the null value is empty string.
		// Until PrimeNG version: 7.1.3.
		if (String(this.contaPagar.planoContas) === '') {
			this.contaPagar.planoContas = null;
		}
	}

	contaPagarPlanoContasAutoComplete(event) {
	    const query = event.query;
	    this.contaPagarService
	      .planoContaPlanoContasAutoComplete(query)
	      .then((result) => {
	        this.contaPagarPlanoContasAutoCompleteSuggestions = result as PlanoContaAutoComplete[];
	      })
	      .catch(error => {
	        this.messageHandler.showError(error);
	      });
	}

	contaPagarPlanoContasAutoCompleteFieldConverter(planoContas: PlanoContaAutoComplete) {
		let text = '';
		if (planoContas) {
			if (planoContas.codigo) {
			    if (text !== '') {
			      text += ' - ';
			    }
			    text += planoContas.codigo;
			}

			if (planoContas.descricao) {
			    if (text !== '') {
			      text += ' - ';
			    }
			    text += planoContas.descricao;
			}

		}

		if (text === '') {
			text = null;
		}
		return text;
	}


	contaPagarContaBancariaAutoCompleteClear(event) {
		// The autoComplete value has been reseted
		this.contaPagar.contaBancaria = null;
	}

	contaPagarContaBancariaAutoCompleteOnBlur(event) {
		// Seems a PrimeNG bug, if clear an autocomplete field, on onBlur event, the null value is empty string.
		// Until PrimeNG version: 7.1.3.
		if (String(this.contaPagar.contaBancaria) === '') {
			this.contaPagar.contaBancaria = null;
		}
	}

	contaPagarContaBancariaAutoComplete(event) {
	    const query = event.query;
	    this.contaPagarService
	      .contaBancariaContaBancariaAutoComplete(query)
	      .then((result) => {
	        this.contaPagarContaBancariaAutoCompleteSuggestions = result as ContaBancariaAutoComplete[];
	      })
	      .catch(error => {
	        this.messageHandler.showError(error);
	      });
	}

	contaPagarContaBancariaAutoCompleteFieldConverter(contaBancaria: ContaBancariaAutoComplete) {
		let text = '';
		if (contaBancaria) {
			if (contaBancaria.nomeTitular) {
			    if (text !== '') {
			      text += ' - ';
			    }
			    text += contaBancaria.nomeTitular;
			}

			if (contaBancaria.numeroConta) {
			    if (text !== '') {
			      text += ' - ';
			    }
			    text += contaBancaria.numeroConta;
			}

		}

		if (text === '') {
			text = null;
		}
		return text;
	}


	contaPagarCartaoCreditoAutoCompleteClear(event) {
		// The autoComplete value has been reseted
		this.contaPagar.cartaoCredito = null;
	}

	contaPagarCartaoCreditoAutoCompleteOnBlur(event) {
		// Seems a PrimeNG bug, if clear an autocomplete field, on onBlur event, the null value is empty string.
		// Until PrimeNG version: 7.1.3.
		if (String(this.contaPagar.cartaoCredito) === '') {
			this.contaPagar.cartaoCredito = null;
		}
	}

	contaPagarCartaoCreditoAutoComplete(event) {
	    const query = event.query;
	    this.contaPagarService
	      .cartaoCreditoCartaoCreditoAutoComplete(query)
	      .then((result) => {
	        this.contaPagarCartaoCreditoAutoCompleteSuggestions = result as CartaoCreditoAutoComplete[];
	      })
	      .catch(error => {
	        this.messageHandler.showError(error);
	      });
	}

	contaPagarCartaoCreditoAutoCompleteFieldConverter(cartaoCredito: CartaoCreditoAutoComplete) {
		let text = '';
		if (cartaoCredito) {
			if (cartaoCredito.nomeTitular) {
			    if (text !== '') {
			      text += ' - ';
			    }
			    text += cartaoCredito.nomeTitular;
			}

			if (cartaoCredito.numeroCartao) {
			    if (text !== '') {
			      text += ' - ';
			    }
			    text += cartaoCredito.numeroCartao;
			}

		}

		if (text === '') {
			text = null;
		}
		return text;
	}


	contaPagarFornecedorAutoCompleteClear(event) {
		// The autoComplete value has been reseted
		this.contaPagar.fornecedor = null;
	}

	contaPagarFornecedorAutoCompleteOnBlur(event) {
		// Seems a PrimeNG bug, if clear an autocomplete field, on onBlur event, the null value is empty string.
		// Until PrimeNG version: 7.1.3.
		if (String(this.contaPagar.fornecedor) === '') {
			this.contaPagar.fornecedor = null;
		}
	}

	contaPagarFornecedorAutoComplete(event) {
	    const query = event.query;
	    this.contaPagarService
	      .fornecedorFornecedorAutoComplete(query)
	      .then((result) => {
	        this.contaPagarFornecedorAutoCompleteSuggestions = result as FornecedorAutoComplete[];
	      })
	      .catch(error => {
	        this.messageHandler.showError(error);
	      });
	}

	contaPagarFornecedorAutoCompleteFieldConverter(fornecedor: FornecedorAutoComplete) {
		let text = '';
		if (fornecedor) {
			if (fornecedor.nome) {
			    if (text !== '') {
			      text += ' - ';
			    }
			    text += fornecedor.nome;
			}

		}

		if (text === '') {
			text = null;
		}
		return text;
	}

	private initializeContaPagarFormaPagamentoOptions() {
	    this.contaPagarFormaPagamentoOptions = [
	    	{ label: 'Selecione um item', value: null },
	    	{ label: this.getTranslation('financeiro.contas_pagar.contaPagar_formaPagamento_dinheiro'), value: 'DINHEIRO' },
	    	{ label: this.getTranslation('financeiro.contas_pagar.contaPagar_formaPagamento_conta_bancaria'), value: 'CONTA_BANCARIA' },
	    	{ label: this.getTranslation('financeiro.contas_pagar.contaPagar_formaPagamento_cartao_credito'), value: 'CARTAO_CREDITO' },
	    	{ label: this.getTranslation('financeiro.contas_pagar.contaPagar_formaPagamento_vale_refeicao'), value: 'VALE_REFEICAO' },
	    	{ label: this.getTranslation('financeiro.contas_pagar.contaPagar_formaPagamento_vale_alimentacao'), value: 'VALE_ALIMENTACAO' },
	    	{ label: this.getTranslation('financeiro.contas_pagar.contaPagar_formaPagamento_cheque'), value: 'CHEQUE' },
	    	{ label: this.getTranslation('financeiro.contas_pagar.contaPagar_formaPagamento_outros'), value: 'OUTROS' }
	    ];
	}


	// TODO: temporário, só para testes.
	getTranslation(key: string): string {
		const value = this.financeiroContasPagarTranslationService.getTranslation(key);
		return value;

		// const result = key.substring(key.lastIndexOf('_') + 1);
		// return result;
	}


	actionMakeCopiesHiddeWhen(): boolean {
		const expression = ((this.contaPagar.maisOpcoes === false) || (this.contaPagar.contaPaga));
		return expression;
	}

	actionFazerCopiasContaPagarHelp(): string {
		return this.customContaPagarService.actionFazerCopiasContaPagarHelp();
	}

	actionFazerCopiasContaPagar(form: FormControl) {
	      if (!this.contaPagar.agrupador) {
	        this.messageHandler.showError('Campo \'Identificador para agrupamento da conta\' deve ser informado para gerar cópias.');
	        return;
	      }

	      if (!this.contaPagar.dataVencimento) {
	        this.messageHandler.showError('Campo \'Data de vencimento\' deve ser informado para gerar cópias.');
	        return;
	      }

	      // Begin custom action.
	      if (!this.customContaPagarService.beforeActionFazerCopiasContaPagar()) {
	      	return;
	      }
	      // End custom action.

	      // Begin validation for past dates
	      const dataVencimentoFirstCopy = moment(this.contaPagar.dataVencimento).add(1, 'month');
	      const today = moment();
	      if (dataVencimentoFirstCopy.isBefore(today)) {
			const dataVencimentoFirstCopyStr = dataVencimentoFirstCopy.format('DD/MM/YYYY');
			const dataVencimentoStr = moment(this.contaPagar.dataVencimento).format('DD/MM/YYYY');
			this.confirmation.confirm({
			  message: `Baseado na data de data de vencimento da conta atual (<strong>${dataVencimentoStr}</strong>),
			  a primeira cópia da conta terá data de data de vencimento no passado (<strong>${dataVencimentoFirstCopyStr}</strong>).
			  <br>Deseja continuar mesmo assim?`,
			  accept: () => {
			    ///
			    this.contaPagarService.actionFazerCopiasContaPagar(this.contaPagar.id, this.numberOfCopies,
					this.copiesReferenceFieldInterval, this.contaPagar.agrupador)
			    	.then(() => {
			    		this.messageHandler.showSuccess('Operação realizada com sucesso!');

			    		// Begin custom action.
			    		if (!this.customContaPagarService.afterActionFazerCopiasContaPagar()) {
			    			return;
			    		}
			    		// End custom action.

			    	}).
			    	catch(error => {
				    	const message =  JSON.parse(error._body).message || 'Não foi possível realizar a operação';
				    	console.log(error);
				      	this.messageHandler.showError(message);
			  		});
			  }
			});

	      	return;
	      }
	      // End validation
	      this.contaPagarService.actionFazerCopiasContaPagar(this.contaPagar.id, this.numberOfCopies,
	        this.copiesReferenceFieldInterval, this.contaPagar.agrupador)
		    .then(() => {
	        	this.messageHandler.showSuccess('Operação realizada com sucesso!');

		  		// Begin custom action.
		  		if (!this.customContaPagarService.afterActionFazerCopiasContaPagar()) {
		  			return;
		  		}
		  		// End custom action.

		    }).
		    catch(error => {
	        	const message =  JSON.parse(error._body).message || 'Não foi possível realizar a operação';
	        	console.log(error);
		      	this.messageHandler.showError(message);
		  });
	}

	initializeCopiesReferenceFieldOptions() {
	    this.copiesReferenceFieldOptions = [
	      this.copiesReferenceField
	    ];

	    this.copiesReferenceFieldSelected = this.copiesReferenceField;

	    this.numberOfCopies = 1;
	    this.copiesReferenceFieldInterval = 30;
	}

	initializeTiposPagamentosOptions() {
    this.tiposPagamentos = [
      { label: 'Pagamento único', value: TIPO_PAGAMENTO_SINGLE },
      { label: 'Pagamentos múltiplos', value: TIPO_PAGAMENTO_MULTIPLE } // or MULTIPLE
    ];

    this.contaPagar.tipoPagamento = this.tiposPagamentos[0].value;
  }

	// Begin RuleWithSlotAppyHiddeComponent

	ruleNumDocumentoAppyHiddeComponent() {
		const expression = (!this.contaPagar.maisOpcoes);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}

	ruleObservacoesAppyHiddeComponent() {
		const expression = (!this.contaPagar.maisOpcoes);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}

	ruleAgrupadorAppyHiddeComponent() {
		const expression = (!this.contaPagar.maisOpcoes);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}

	ruleDataPagamentoAppyHiddeComponent() {
		const expression = (!this.contaPagamento || !this.contaPagar.contaPaga);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
  }

 	ruleValorDescontoAppyHiddeComponent() {
		const expression = (!this.contaPagamento || !this.contaPagar.contaPaga);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}

	ruleValorMultaAppyHiddeComponent() {
		const expression = (!this.contaPagamento || !this.contaPagar.contaPaga);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}

	ruleValorJurosAppyHiddeComponent() {
		const expression = (!this.contaPagamento || !this.contaPagar.contaPaga);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}

	ruleValorAcrescimosAppyHiddeComponent() {
		const expression = (!this.contaPagamento || !this.contaPagar.contaPaga);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}

	ruleValorPagoAppyHiddeComponent() {
		const expression = (!this.contaPagamento || !this.contaPagar.contaPaga);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}

	ruleContaBancariaAppyHiddeComponent() {
		const expression = (String(this.contaPagar.formaPagamento) !== 'CONTA_BANCARIA');
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}

	ruleCartaoCreditoAppyHiddeComponent() {
		const expression = (String(this.contaPagar.formaPagamento) !== 'CARTAO_CREDITO');
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}

	ruleOutrosDescricaoAppyHiddeComponent() {
		const expression = (String(this.contaPagar.formaPagamento) === 'CONTA_BANCARIA') || (String(this.contaPagar.formaPagamento) === 'CARTAO_CREDITO');
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}

	ruleIdConcBancariaAppyHiddeComponent() {
		const expression = (!this.contaPagar.maisOpcoes) || (!this.contaPagar.idConcBancaria || this.contaPagar.idConcBancaria.trim().length === 0);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}

	ruleNumDocConcBancariaAppyHiddeComponent() {
		const expression = (!this.contaPagar.maisOpcoes) || (!this.contaPagar.numDocConcBancaria || this.contaPagar.numDocConcBancaria.trim().length === 0);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}

	ruleHistConcBancariaAppyHiddeComponent() {
		const expression = (!this.contaPagar.maisOpcoes) || (!this.contaPagar.numDocConcBancaria || this.contaPagar.numDocConcBancaria.trim().length === 0);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}
	// End Begin RuleWithSlotAppyHiddeComponent



	// Begin RulesWithSlotAppyMathExpression

	ruleContaPagarValorPagoOnAppyMathExpression(event) {
		if (this.contaPagar) {
			const whenExpression = (this.contaPagar.contaPaga) && (String(this.contaPagar.tipoPagamento) === 'SINGLE');
			if (whenExpression) {
				this.contaPagar.valorPago = ((this.contaPagar.valor || 0) -
				(this.contaPagar.valorDesconto || 0) +
				(this.contaPagar.valorMulta || 0) +
				(this.contaPagar.valorJuros || 0) +
				(this.contaPagar.valorAcrescimos || 0));
			}
		}
	}
	// End Begin RulesWithSlotAppyMathExpression


	initLocaleSettings() {
		this.calendarLocale = this.financeiroContasPagarTranslationService.getCalendarLocaleSettings();
	}



	contaPagaChange(event: any) {

		// Begin custom action.
		this.customContaPagarService.beforeContaPagaChange(event);
		// End custom action.

  }

  getContaPagarMultipleProgressBarStyleClass() {
    const value = this?.getContaPagarMultiplePercentualOrsadoVsPrevisto() ?? 0;
    if (value > 100) {
      return 'kb-progress-bar-red kb-progress-bar-label';
    } else {
      return 'kb-progress-bar-normal kb-progress-bar-label';
    }
  }

  canShowContaPagarMultipleToolBar() {
    return String(this.contaPagar.tipoPagamento) === 'MULTIPLE';
  }

  getContaPagarMultipleProgressBarValue() {
    const value = this?.getContaPagarMultiplePercentualOrsadoVsPrevisto() ?? 0;
    return value.toFixed(2);
    // return value.toLocaleString('pt');
  }

  getContaPagarMultiplePercentualOrsadoVsPrevisto(): number {
    let result = 0;
    try {
      const valor = this.contaPagar?.valor ?? 0;
      const valotTotalPago = this?.contaPagarMultipleList?.contaPagarMultipleSumFields?.sumValorPago ?? 0;
      if (valor > 0 && valotTotalPago > 0 ) {
        result = valotTotalPago / valor * 100;
      }
    } catch (error) {
      result = 0;
      console.log('Erro ao calcular o percentual pago da conta:' + error);
    }

    return result;
  }

  getContaPagarMultipleProgressBarDiff() {
    let result = 0;
    try {
      const valor = this.contaPagar?.valor ?? 0;
      const valotTotalPago = this?.contaPagarMultipleList?.contaPagarMultipleSumFields?.sumValorPago ?? 0;
      result = valor - valotTotalPago;
    } catch (error) {
      console.log('Erro ao calcular o percentual pago da conta:' + error);
    }

    return result;
  }

  getContaPagarMultipleProgressBarDiffText(): string {
    let text = 'Opps :(';
    try {
      const valor = this.contaPagar?.valor ?? 0;
      const valotTotalPago = this?.contaPagarMultipleList?.contaPagarMultipleSumFields?.sumValorPago ?? 0;
      const diff = valor - valotTotalPago;
      const diffAbs = Math.abs(diff);
      const valueStr = diffAbs.toLocaleString('pt', { style: 'currency', currency: 'BRL' });
      text = '<span class="kb-conta-multiple-diff-text-normal">' + 'Falta pagar: ' + valueStr;
      if (diff < 0) {
        text = '<span class="kb-conta-multiple-diff-text-red">' + 'Pago a mais: ' + valueStr;
      }
      text += '</span>';
    } catch (error) {
      console.log('Erro ao calcular getContaPagarMultipleProgressBarDiffText:' + error);
    }

    return text;
  }

	defaultElementSetFocus() {
		try {
	    	this.defaultElementRef.nativeElement.focus();
	    } catch (error) {
	    	console.log('Error setting focus at defaultElementSetFocus:' + error);
	    }
  }

  onContaPagarContaPagamentoChange(event) {
    if (this.contaPagar.id) { // Editando
      const isMultiple = this.contaPagar.tipoPagamento === TIPO_PAGAMENTO_MULTIPLE;
      if (isMultiple && !this.contaPagarMultipleList.itemsLoaded) {
        this.loadContaPagarMultipleItems();
      }
    }
  }

  onContaPagarMultipleListLoaded(items: ContaPagarMultiple[]) {
    // Do nothing yet.
  }

  onTipoPagamentoClicked(event) {
    const tipoPagamento = event.option.value;
    if (this.contaPagar.id && // Atualizando
      (tipoPagamento !== this.contaPagar.tipoPagamento) // Mudou o tipo de pagamento
      ) {

      // Não pode mudar para único se tiver pagamentos múltiplos cadastrados.
      const temMultiple = this.contaPagarMultipleList.contaPagarMultipleListItems.length > 0;
      if (tipoPagamento === TIPO_PAGAMENTO_SINGLE && temMultiple) {
        // Proibído.
        this.messageHandler.showError('Não é permitido alterar de "Pagamentos múltiplos" para "Pagamento único" ' +
      ' quando existirem registros de pagamentos múltiplos. Caso realmente deseja alterar, ' +
      ' você deve primeiro excluir os registros de pagamentos múltiplos.');

      setTimeout(function() {
        this.contaPagar.tipoPagamento = TIPO_PAGAMENTO_MULTIPLE;

      }.bind(this), 1);
      return; // Aborta


      } // if

      // Ok, atualiza o tipo de pagamento para o tipo alterado e salva o registro.
      this.contaPagar.tipoPagamento = tipoPagamento;
      this.update();
    } // if

    if (tipoPagamento === TIPO_PAGAMENTO_MULTIPLE && !this.contaPagarMultipleList.itemsLoaded) {
      this.loadContaPagarMultipleItems();
    }
  }

  onTipoPagamentoChanged(event) {
    /*if (event.value !== TIPO_PAGAMENTO_MULTIPLE && this.contaPagarMultipleList.contaPagarMultipleListItems.length > 0) {
      this.messageHandler.showError('Não é permitido alterar de "Pagamentos múltiplos" para "Pagamento único" ' +
      ' quando existirem registros de pagamentos múltiplos. Caso realmente deseja alterar, ' +
      ' você deve primeiro excluir os registros de pagamentos múltiplos.');

      setTimeout(function() {
        this.contaPagar.tipoPagamento.value = TIPO_PAGAMENTO_MULTIPLE;

      }.bind(this), 1);

      return;
    }

    if (event.value === TIPO_PAGAMENTO_MULTIPLE && !this.contaPagarMultipleList.itemsLoaded) {
      this.loadContaPagarMultipleItems();
    }*/
  }

  loadContaPagarMultipleItems() {
      this.contaPagarMultipleList.loadItems();
  }

  onContaPagarMultipleSaved(sender: ContaPagarMultiple) {
    this.displayDialogMultipleCrud = false;
    this.contaPagarMultipleList.contaPagarMultipleList();
    this.contaPagarMultipleCrud.contaPagarMultiple = new ContaPagarMultiple();
  }

  onContaPagarMultipleNovo() {
    if (!this.contaPagar.id) {
      this.messageHandler.showError('Para poder cadastrar pagamentos múltiplos, você deve primeiro salvar o registro da conta.');
      return;
    }

    const contaPagarMultiple = new ContaPagarMultiple();
    contaPagarMultiple.descricao = this.contaPagar.descricao;
    contaPagarMultiple.dataPagamento = this.adjustDate(moment().toDate());
    contaPagarMultiple.planoContas = this.contaPagar.planoContas;
    contaPagarMultiple.formaPagamento = this.contaPagar.formaPagamento;
    contaPagarMultiple.contaBancaria = this.contaPagar.contaBancaria;
    contaPagarMultiple.cartaoCredito = this.contaPagar.cartaoCredito;
    contaPagarMultiple.fornecedor = this.contaPagar.fornecedor;
    contaPagarMultiple.contaPagar = this.contaPagar;

    this.contaPagarMultipleCrud.beginFormContaPagarMultipleRef(contaPagarMultiple);

    this.displayDialogMultipleCrud = true;

    setTimeout(function() {
      this.contaPagarMultipleCrud.contaPagarMultipleDefaultElementSetFocus();
    }.bind(this), 1);
  }

  onContaPagarMultipleEdit() {
    const selectedItems = this.contaPagarMultipleList.contaPagarMultipleItemsSelected;
    this.contaPagarMultipleCrud.contaPagarMultiple = this.cloneContaPagarMultiple(selectedItems[0]);
    this.displayDialogMultipleCrud = true;

    setTimeout(function() {
      this.contaPagarMultipleCrud.contaPagarMultipleDefaultElementSetFocus();
    }.bind(this), 1);
  }

  onContaPagarMultipleDelete() {

    const selectedItems = [...this.contaPagarMultipleList.contaPagarMultipleItemsSelected];

    if (!selectedItems || selectedItems.length === 0) {
      this.messageHandler.showError('Nenhum item foi selecionado para exclusão.');
      return;
    }

    let message = 'Confirma a exclusão do registro selecionado?';
    if (selectedItems.length > 1) {
      message = `Confirma a exclusão dos ${selectedItems.length} registros selecionados?` +
      'Dependendo da quantidade de registros selecionados, a operação de exclusão pode demorar.';
    }
    message += '<p><strong>ATENÇÃO: Itens excluídos serão estornados do caixa.</strong></p>';

    this.confirmation.confirm({
      message: message,
      accept: () => {
        selectedItems.forEach(item => {
          this.contaPagarMultipleList.deleteContaPagarMultiple(item, false);
        });

      }
    });
  }

  onContaPagarMultipleCanceled(sender: ContaPagarMultiple) {
    this.displayDialogMultipleCrud = false;
    this.contaPagarMultipleCrud.contaPagarMultiple = new ContaPagarMultiple();
  }

  contaPagarMultipleToolBarButtons() {
    const selectedItems = this.contaPagarMultipleList.contaPagarMultipleItemsSelected;
    this.contaPagarMultipleCanEdit = selectedItems && selectedItems.length === 1;

    this.contaPagarMultipleCanDelete = selectedItems && selectedItems.length > 0;
  }

  onContaPagarMultipleTableHeaderCheckboxClick(event) {
    this.contaPagarMultipleToolBarButtons();
  }

  onContaPagarMultipleRowSelect(event) {
    this.contaPagarMultipleCrud.contaPagarMultiple = this.cloneContaPagarMultiple(event.data);
    this.contaPagarMultipleToolBarButtons();
  }

  onContaPagarMultipleRowUnselect(event) {
    this.contaPagarMultipleCrud.contaPagarMultiple = new ContaPagarMultiple();
    this.contaPagarMultipleToolBarButtons();
  }

  cloneContaPagarMultiple(obj: ContaPagarMultiple): ContaPagarMultiple {
    const result = new ContaPagarMultiple();
    for (const prop of Object.keys(obj)) {
      result[prop] = obj[prop];
    }
    return result;
  }

  listContaPagarMultipleStyleClass() {
    let result = 'ui-g-12';
    if (!this.contaPagamento || String(this.contaPagar.tipoPagamento) !== TIPO_PAGAMENTO_MULTIPLE) {
      result += ' hidden';
    }
    return result;
  }

  adjustDate(date: Date): Date {
    if (date) {
      date = moment(date).startOf('day').toDate();
    }
		return date;
	}

}
