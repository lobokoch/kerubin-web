import { ContaPagarMultiple } from './contapagar.model';
/**********************************************************************************************
Code generated by MKL Plug-in
Copyright: Kerubin - kerubin.platform@gmail.com

WARNING: DO NOT CHANGE THIS CODE BECAUSE THE CHANGES WILL BE LOST IN THE NEXT CODE GENERATION.
***********************************************************************************************/


import { Component, OnInit } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { MessageService, MenuItem } from 'primeng/api';

import { ElementRef, ViewChild } from '@angular/core';
import { ContaPagar } from './contapagar.model';
import { ContaPagarService } from './contapagar.service';
import { CustomContaPagarService } from './custom-contapagar.service';
import { FinanceiroContasPagarTranslationService } from './../i18n/financeiro-contaspagar-translation.service';
import * as moment from 'moment';

import { PlanoContaService } from './../planoconta/planoconta.service';
import { PlanoConta } from './../planoconta/planoconta.model';
import { PlanoContaAutoComplete } from './../planoconta/planoconta.model';

import { ContaBancariaService } from './../contabancaria/contabancaria.service';
import { ContaBancaria } from './../contabancaria/contabancaria.model';
import { ContaBancariaAutoComplete } from './../contabancaria/contabancaria.model';

import { CartaoCreditoService } from './../cartaocredito/cartaocredito.service';
import { CartaoCredito } from './../cartaocredito/cartaocredito.model';
import { CartaoCreditoAutoComplete } from './../cartaocredito/cartaocredito.model';

import { FornecedorService } from './../fornecedor/fornecedor.service';
import { Fornecedor } from './../fornecedor/fornecedor.model';
import { FornecedorAutoComplete } from './../fornecedor/fornecedor.model';

import { FormaPagamento } from './../enums/financeiro-contaspagar-enums.model';
import {SelectItem, ConfirmationService} from 'primeng/api';
import { MessageHandlerService } from 'src/app/core/message-handler.service';


@Component({
  selector: 'app-crud-contapagar',
  templateUrl: './crud-contapagar.component.html',
  styleUrls: ['./crud-contapagar.component.css']
})

export class ContaPagarComponent implements OnInit {
  displayDialogMultipleCrud = false;
  contaPagarMultiple = new ContaPagarMultiple();
  contaPagarMultipleListItems: ContaPagarMultiple[];
  contaPagarMultipleItemsSelected: ContaPagarMultiple[];
  contaPagarMultipleListFilter_pageSize = 5;
  contaPagarMultipleListTotalElements = 100;
  contaPagarMultipleSumFields_sumValorPago = 0;
  contaPagamento = false;
  contaPagarMultipleCanEdit = false;
  contaPagarMultipleCanDelete = false;


  tipoPagamentoSelected = 'SINGLE'; // or MULTIPLE

  tiposPagamentos: SelectItem[];

	showHideHelp = false; // for show/hide help.


	calendarLocale: any;


	numberOfCopies = 1;
	copiesReferenceFieldInterval = 30;

	copiesReferenceFieldOptions: SelectItem[];
	copiesReferenceField: SelectItem = { label: 'Data de vencimento', value: 'dataVencimento' };
	copiesReferenceFieldSelected: SelectItem;

	contaPagar = new ContaPagar();
	contaPagarPlanoContasAutoCompleteSuggestions: PlanoContaAutoComplete[];


	contaPagarContaBancariaAutoCompleteSuggestions: ContaBancariaAutoComplete[];


	contaPagarCartaoCreditoAutoCompleteSuggestions: CartaoCreditoAutoComplete[];


	contaPagarFornecedorAutoCompleteSuggestions: FornecedorAutoComplete[];
	contaPagarFormaPagamentoOptions: FormaPagamento[];

	@ViewChild('descricaoElementRef', {static: true}) defaultElementRef: ElementRef;

	constructor(
	    private contaPagarService: ContaPagarService,
	    private customContaPagarService: CustomContaPagarService,
	    private financeiroContasPagarTranslationService: FinanceiroContasPagarTranslationService,
	    private planoContaService: PlanoContaService,


	    private contaBancariaService: ContaBancariaService,


	    private cartaoCreditoService: CartaoCreditoService,


	    private fornecedorService: FornecedorService,
	    private route: ActivatedRoute,
	    private confirmation: ConfirmationService,
	    private messageHandler: MessageHandlerService
	) {
		this.customContaPagarService.setComponent(this);

		// Begin custom action.
		if (!this.customContaPagarService.beforeConstructor()) {
			return;
		}
		// End custom action.

		this.initializeContaPagarFormaPagamentoOptions();
    this.initializeCopiesReferenceFieldOptions();

    this.initializeTiposPagamentosOptions();
    this.loadContaPagarMultipleItems();

		// Begin custom action.
		if (!this.customContaPagarService.afterConstructor()) {
			return;
		}
		// End custom action.

	}

	ngOnInit() {

		// Begin custom action.
		if (!this.customContaPagarService.beforeOnInit()) {
			return;
		}
		// End custom action.

		this.initLocaleSettings();
		this.initializeEnumFieldsWithDefault();
	    const id = this.route.snapshot.params['id'];
	    if (id) {
	      this.getContaPagarById(id);
      }

      this.tipoPagamentoSelected = this.tiposPagamentos[0].value;

	    // Begin custom action.
	    if (!this.customContaPagarService.afterOnInit()) {
	    	return;
	    }
	    // End custom action.

	    this.defaultElementSetFocus();
	}

	getShowHideHelpLabel(): string {
		return this.showHideHelp ? 'Ocultar ajuda' : 'Mostrar ajuda';
	}

	begin(form: FormControl) {
	    form.reset();
	    setTimeout(function() {

	    	// Begin custom action.
	    	if (!this.customContaPagarService.beforeOnNewRecord()) {
	    		return;
	    	}
	    	// End custom action.

	      this.contaPagar = new ContaPagar();
	      this.initializeEnumFieldsWithDefault();

		  // Begin custom action.
		  if (!this.customContaPagarService.afterOnNewRecord()) {
		  	return;
		  }
		  // End custom action.

		  this.defaultElementSetFocus();
	    }.bind(this), 1);
	}

	validateAllFormFields(form: FormGroup) {
	    Object.keys(form.controls).forEach(field => {
	      const control = form.get(field);

	      if (control instanceof FormControl) {
	        control.markAsDirty({ onlySelf: true });
	      } else if (control instanceof FormGroup) {
	        this.validateAllFormFields(control);
	      }
	    });
	}

	save(form: FormGroup) {
		if (!form.valid) {
	      this.validateAllFormFields(form);
	      return;
	    }

		if (!this.doRulesFormBeforeSave()) {
			return;
		}


		// Begin custom action.
		if (!this.customContaPagarService.beforeSave()) {
			return;
		}
		// End custom action.

	    if (this.isEditing) {
	      this.update();
	    } else {
	      this.create();
	    }
		this.initializeCopiesReferenceFieldOptions();

		// Begin custom action.
		if (!this.customContaPagarService.afterSave()) {
			return;
		}
		// End custom action.

	}

	// Begin rulesFormBeforeSave
	doRulesFormBeforeSave(): boolean {

		if ((this.contaPagar.contaPaga) && !this.contaPagar.dataPagamento) {
			this.messageHandler.showError('A data do pagamento deve ser informada para poder pagar a conta.');
			return false;
		}


		if ((this.contaPagar.contaPaga) && moment(this.contaPagar.dataPagamento).isAfter(moment({h: 0, m: 0, s: 0, ms: 0}), 'day')) {
			this.messageHandler.showError(`A data do pagamento nÃ£o pode ser maior do que a data de hoje (${moment().format('DD/MM/YYYY')}).`);
			return false;
		}


		if ((this.contaPagar.contaPaga) && !this.contaPagar.valorPago) {
			this.messageHandler.showError('O valor total pago deve ser informado para poder pagar a conta.');
			return false;
		}

		return true;
	}
	// End rulesFormBeforeSave

	create() {

		// Begin custom action.
		if (!this.customContaPagarService.beforeCreate()) {
			return;
		}
		// End custom action.


	    this.contaPagarService.create(this.contaPagar)
	    .then((contaPagar) => {
	      this.contaPagar = contaPagar;
	      this.messageHandler.showSuccess('Registro criado com sucesso!');

	      // Begin custom action.
	      if (!this.customContaPagarService.afterCreate()) {
	      	return;
	      }
	      // End custom action.

	      this.defaultElementSetFocus();
	    }).
	    catch(error => {
	      this.messageHandler.showError(error);
	    });
	}

	update() {

		// Begin custom action.
		if (!this.customContaPagarService.beforeUpdate()) {
			return;
		}
		// End custom action.

	    this.contaPagarService.update(this.contaPagar)
	    .then((contaPagar) => {
	      this.contaPagar = contaPagar;
	      this.messageHandler.showSuccess('Registro alterado!');

	      // Begin custom action.
	      if (!this.customContaPagarService.afterUpdate()) {
	      	return;
	      }
	      // End custom action.

	      this.defaultElementSetFocus();
	    })
	    .catch(error => {
	      this.messageHandler.showError(error);
	    });
	}

	getContaPagarById(id: string) {

		// Begin custom action.
		if (!this.customContaPagarService.beforeGetById(id)) {
			return;
		}
		// End custom action.

	    this.contaPagarService.retrieve(id)
	    .then((contaPagar) => {
	    	this.contaPagar = contaPagar;

	    	// Begin custom action.
	    	if (!this.customContaPagarService.afterGetById(id)) {
	    		return;
	    	}
	    	// End custom action.

	    })
	    .catch(error => {
	      this.messageHandler.showError(error);
	    });
	}

	get isEditing() {
	    return Boolean(this.contaPagar.id);
	}

	initializeEnumFieldsWithDefault() {
		this.contaPagar.formaPagamento = this.contaPagarFormaPagamentoOptions[1].value;
	}


	contaPagarPlanoContasAutoCompleteClear(event) {
		// The autoComplete value has been reseted
		this.contaPagar.planoContas = null;
	}

	contaPagarPlanoContasAutoCompleteOnBlur(event) {
		// Seems a PrimeNG bug, if clear an autocomplete field, on onBlur event, the null value is empty string.
		// Until PrimeNG version: 7.1.3.
		if (String(this.contaPagar.planoContas) === '') {
			this.contaPagar.planoContas = null;
		}
	}

	contaPagarPlanoContasAutoComplete(event) {
	    const query = event.query;
	    this.contaPagarService
	      .planoContaPlanoContasAutoComplete(query)
	      .then((result) => {
	        this.contaPagarPlanoContasAutoCompleteSuggestions = result as PlanoContaAutoComplete[];
	      })
	      .catch(error => {
	        this.messageHandler.showError(error);
	      });
	}

	contaPagarPlanoContasAutoCompleteFieldConverter(planoContas: PlanoContaAutoComplete) {
		let text = '';
		if (planoContas) {
			if (planoContas.codigo) {
			    if (text !== '') {
			      text += ' - ';
			    }
			    text += planoContas.codigo;
			}

			if (planoContas.descricao) {
			    if (text !== '') {
			      text += ' - ';
			    }
			    text += planoContas.descricao;
			}

		}

		if (text === '') {
			text = null;
		}
		return text;
	}


	contaPagarContaBancariaAutoCompleteClear(event) {
		// The autoComplete value has been reseted
		this.contaPagar.contaBancaria = null;
	}

	contaPagarContaBancariaAutoCompleteOnBlur(event) {
		// Seems a PrimeNG bug, if clear an autocomplete field, on onBlur event, the null value is empty string.
		// Until PrimeNG version: 7.1.3.
		if (String(this.contaPagar.contaBancaria) === '') {
			this.contaPagar.contaBancaria = null;
		}
	}

	contaPagarContaBancariaAutoComplete(event) {
	    const query = event.query;
	    this.contaPagarService
	      .contaBancariaContaBancariaAutoComplete(query)
	      .then((result) => {
	        this.contaPagarContaBancariaAutoCompleteSuggestions = result as ContaBancariaAutoComplete[];
	      })
	      .catch(error => {
	        this.messageHandler.showError(error);
	      });
	}

	contaPagarContaBancariaAutoCompleteFieldConverter(contaBancaria: ContaBancariaAutoComplete) {
		let text = '';
		if (contaBancaria) {
			if (contaBancaria.nomeTitular) {
			    if (text !== '') {
			      text += ' - ';
			    }
			    text += contaBancaria.nomeTitular;
			}

			if (contaBancaria.numeroConta) {
			    if (text !== '') {
			      text += ' - ';
			    }
			    text += contaBancaria.numeroConta;
			}

		}

		if (text === '') {
			text = null;
		}
		return text;
	}


	contaPagarCartaoCreditoAutoCompleteClear(event) {
		// The autoComplete value has been reseted
		this.contaPagar.cartaoCredito = null;
	}

	contaPagarCartaoCreditoAutoCompleteOnBlur(event) {
		// Seems a PrimeNG bug, if clear an autocomplete field, on onBlur event, the null value is empty string.
		// Until PrimeNG version: 7.1.3.
		if (String(this.contaPagar.cartaoCredito) === '') {
			this.contaPagar.cartaoCredito = null;
		}
	}

	contaPagarCartaoCreditoAutoComplete(event) {
	    const query = event.query;
	    this.contaPagarService
	      .cartaoCreditoCartaoCreditoAutoComplete(query)
	      .then((result) => {
	        this.contaPagarCartaoCreditoAutoCompleteSuggestions = result as CartaoCreditoAutoComplete[];
	      })
	      .catch(error => {
	        this.messageHandler.showError(error);
	      });
	}

	contaPagarCartaoCreditoAutoCompleteFieldConverter(cartaoCredito: CartaoCreditoAutoComplete) {
		let text = '';
		if (cartaoCredito) {
			if (cartaoCredito.nomeTitular) {
			    if (text !== '') {
			      text += ' - ';
			    }
			    text += cartaoCredito.nomeTitular;
			}

			if (cartaoCredito.numeroCartao) {
			    if (text !== '') {
			      text += ' - ';
			    }
			    text += cartaoCredito.numeroCartao;
			}

		}

		if (text === '') {
			text = null;
		}
		return text;
	}


	contaPagarFornecedorAutoCompleteClear(event) {
		// The autoComplete value has been reseted
		this.contaPagar.fornecedor = null;
	}

	contaPagarFornecedorAutoCompleteOnBlur(event) {
		// Seems a PrimeNG bug, if clear an autocomplete field, on onBlur event, the null value is empty string.
		// Until PrimeNG version: 7.1.3.
		if (String(this.contaPagar.fornecedor) === '') {
			this.contaPagar.fornecedor = null;
		}
	}

	contaPagarFornecedorAutoComplete(event) {
	    const query = event.query;
	    this.contaPagarService
	      .fornecedorFornecedorAutoComplete(query)
	      .then((result) => {
	        this.contaPagarFornecedorAutoCompleteSuggestions = result as FornecedorAutoComplete[];
	      })
	      .catch(error => {
	        this.messageHandler.showError(error);
	      });
	}

	contaPagarFornecedorAutoCompleteFieldConverter(fornecedor: FornecedorAutoComplete) {
		let text = '';
		if (fornecedor) {
			if (fornecedor.nome) {
			    if (text !== '') {
			      text += ' - ';
			    }
			    text += fornecedor.nome;
			}

		}

		if (text === '') {
			text = null;
		}
		return text;
	}

	private initializeContaPagarFormaPagamentoOptions() {
	    this.contaPagarFormaPagamentoOptions = [
	    	{ label: 'Selecione um item', value: null },
	    	{ label: this.getTranslation('financeiro.contas_pagar.contaPagar_formaPagamento_dinheiro'), value: 'DINHEIRO' },
	    	{ label: this.getTranslation('financeiro.contas_pagar.contaPagar_formaPagamento_conta_bancaria'), value: 'CONTA_BANCARIA' },
	    	{ label: this.getTranslation('financeiro.contas_pagar.contaPagar_formaPagamento_cartao_credito'), value: 'CARTAO_CREDITO' },
	    	{ label: this.getTranslation('financeiro.contas_pagar.contaPagar_formaPagamento_vale_refeicao'), value: 'VALE_REFEICAO' },
	    	{ label: this.getTranslation('financeiro.contas_pagar.contaPagar_formaPagamento_vale_alimentacao'), value: 'VALE_ALIMENTACAO' },
	    	{ label: this.getTranslation('financeiro.contas_pagar.contaPagar_formaPagamento_cheque'), value: 'CHEQUE' },
	    	{ label: this.getTranslation('financeiro.contas_pagar.contaPagar_formaPagamento_outros'), value: 'OUTROS' }
	    ];
	}


	// TODO: temporÃ¡rio, sÃ³ para testes.
	getTranslation(key: string): string {
		const value = this.financeiroContasPagarTranslationService.getTranslation(key);
		return value;

		// const result = key.substring(key.lastIndexOf('_') + 1);
		// return result;
	}


	actionMakeCopiesHiddeWhen(): boolean {
		const expression = ((this.contaPagar.maisOpcoes === false) || (this.contaPagar.contaPaga));
		return expression;
	}

	actionFazerCopiasContaPagarHelp(): string {
		return this.customContaPagarService.actionFazerCopiasContaPagarHelp();
	}

	actionFazerCopiasContaPagar(form: FormControl) {
	      if (!this.contaPagar.agrupador) {
	        this.messageHandler.showError('Campo \'Identificador para agrupamento da conta\' deve ser informado para gerar cÃ³pias.');
	        return;
	      }

	      if (!this.contaPagar.dataVencimento) {
	        this.messageHandler.showError('Campo \'Data de vencimento\' deve ser informado para gerar cÃ³pias.');
	        return;
	      }

	      // Begin custom action.
	      if (!this.customContaPagarService.beforeActionFazerCopiasContaPagar()) {
	      	return;
	      }
	      // End custom action.

	      // Begin validation for past dates
	      const dataVencimentoFirstCopy = moment(this.contaPagar.dataVencimento).add(1, 'month');
	      const today = moment();
	      if (dataVencimentoFirstCopy.isBefore(today)) {
			const dataVencimentoFirstCopyStr = dataVencimentoFirstCopy.format('DD/MM/YYYY');
			const dataVencimentoStr = moment(this.contaPagar.dataVencimento).format('DD/MM/YYYY');
			this.confirmation.confirm({
			  message: `Baseado na data de data de vencimento da conta atual (<strong>${dataVencimentoStr}</strong>),
			  a primeira cÃ³pia da conta terÃ¡ data de data de vencimento no passado (<strong>${dataVencimentoFirstCopyStr}</strong>).
			  <br>Deseja continuar mesmo assim?`,
			  accept: () => {
			    ///
			    this.contaPagarService.actionFazerCopiasContaPagar(this.contaPagar.id, this.numberOfCopies,
					this.copiesReferenceFieldInterval, this.contaPagar.agrupador)
			    	.then(() => {
			    		this.messageHandler.showSuccess('OperaÃ§Ã£o realizada com sucesso!');

			    		// Begin custom action.
			    		if (!this.customContaPagarService.afterActionFazerCopiasContaPagar()) {
			    			return;
			    		}
			    		// End custom action.

			    	}).
			    	catch(error => {
				    	const message =  JSON.parse(error._body).message || 'NÃ£o foi possÃ­vel realizar a operaÃ§Ã£o';
				    	console.log(error);
				      	this.messageHandler.showError(message);
			  		});
			  }
			});

	      	return;
	      }
	      // End validation
	      this.contaPagarService.actionFazerCopiasContaPagar(this.contaPagar.id, this.numberOfCopies,
	        this.copiesReferenceFieldInterval, this.contaPagar.agrupador)
		    .then(() => {
	        	this.messageHandler.showSuccess('OperaÃ§Ã£o realizada com sucesso!');

		  		// Begin custom action.
		  		if (!this.customContaPagarService.afterActionFazerCopiasContaPagar()) {
		  			return;
		  		}
		  		// End custom action.

		    }).
		    catch(error => {
	        	const message =  JSON.parse(error._body).message || 'NÃ£o foi possÃ­vel realizar a operaÃ§Ã£o';
	        	console.log(error);
		      	this.messageHandler.showError(message);
		  });
	}

	initializeCopiesReferenceFieldOptions() {
	    this.copiesReferenceFieldOptions = [
	      this.copiesReferenceField
	    ];

	    this.copiesReferenceFieldSelected = this.copiesReferenceField;

	    this.numberOfCopies = 1;
	    this.copiesReferenceFieldInterval = 30;
	}

	initializeTiposPagamentosOptions() {
    this.tiposPagamentos = [
      { label: 'Pagamento Ãºnico', value: 'SINGLE' },
      { label: 'Pagamentos mÃºltiplos', value: 'MULTIPLE' } // or MULTIPLE
    ];

    this.tipoPagamentoSelected = this.tiposPagamentos[0].value;
  }

	// Begin RuleWithSlotAppyHiddeComponent

	ruleNumDocumentoAppyHiddeComponent() {
		const expression = (!this.contaPagar.maisOpcoes);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}

	ruleObservacoesAppyHiddeComponent() {
		const expression = (!this.contaPagar.maisOpcoes);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}

	ruleAgrupadorAppyHiddeComponent() {
		const expression = this.ruleHideTest();
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}

	ruleDataPagamentoAppyHiddeComponent() {
		const expression = this.ruleHideTest();
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
  }

  ruleHideTest() {
    return !this.contaPagamento || this.tipoPagamentoSelected === 'MULTIPLE';
  }

	ruleValorDescontoAppyHiddeComponent() {
		const expression = this.ruleHideTest();
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}

	ruleValorMultaAppyHiddeComponent() {
		const expression = this.ruleHideTest();
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}

	ruleValorJurosAppyHiddeComponent() {
		const expression = this.ruleHideTest();
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}

	ruleValorAcrescimosAppyHiddeComponent() {
		const expression = this.ruleHideTest();
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}

	ruleValorPagoAppyHiddeComponent() {
		const expression = this.ruleHideTest();
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}

	ruleContaBancariaAppyHiddeComponent() {
		const expression = (String(this.contaPagar.formaPagamento) !== 'CONTA_BANCARIA');
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}

	ruleCartaoCreditoAppyHiddeComponent() {
		const expression = (String(this.contaPagar.formaPagamento) !== 'CARTAO_CREDITO');
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}

	ruleOutrosDescricaoAppyHiddeComponent() {
		const expression = (String(this.contaPagar.formaPagamento) === 'CONTA_BANCARIA') || (String(this.contaPagar.formaPagamento) === 'CARTAO_CREDITO');
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}

	ruleIdConcBancariaAppyHiddeComponent() {
		const expression = (!this.contaPagar.maisOpcoes) || (!this.contaPagar.idConcBancaria || this.contaPagar.idConcBancaria.trim().length === 0);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}

	ruleNumDocConcBancariaAppyHiddeComponent() {
		const expression = (!this.contaPagar.maisOpcoes) || (!this.contaPagar.numDocConcBancaria || this.contaPagar.numDocConcBancaria.trim().length === 0);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}

	ruleHistConcBancariaAppyHiddeComponent() {
		const expression = (!this.contaPagar.maisOpcoes) || (!this.contaPagar.numDocConcBancaria || this.contaPagar.numDocConcBancaria.trim().length === 0);
		if (expression) {
			return 'none'; // Will hidde de component.
		} else {
			return 'inline'; // Default css show element value.
		}
	}
	// End Begin RuleWithSlotAppyHiddeComponent



	// Begin RulesWithSlotAppyMathExpression

	ruleContaPagarValorPagoOnAppyMathExpression(event) {
		if (this.contaPagar) {
			const whenExpression = this.contaPagar.dataPagamento;
			if (whenExpression) {
				this.contaPagar.valorPago = ((this.contaPagar.valor || 0) -
				(this.contaPagar.valorDesconto || 0) +
				(this.contaPagar.valorMulta || 0) +
				(this.contaPagar.valorJuros || 0) +
				(this.contaPagar.valorAcrescimos || 0));
			}
		}
	}
	// End Begin RulesWithSlotAppyMathExpression


	initLocaleSettings() {
		this.calendarLocale = this.financeiroContasPagarTranslationService.getCalendarLocaleSettings();
	}



	contaPagaChange(event: any) {

		// Begin custom action.
		this.customContaPagarService.beforeContaPagaChange(event);
		// End custom action.

	}

	defaultElementSetFocus() {
		try {
	    	this.defaultElementRef.nativeElement.focus();
	    } catch (error) {
	    	console.log('Error setting focus at defaultElementSetFocus:' + error);
	    }
  }


  contaPagarMultipleFornecedorAutoCompleteFieldConverter(fornecedor: any) {
    return null;
  }

  loadContaPagarMultipleItems() {
    this.contaPagarMultipleListItems = new Array();
    this.contaPagarMultipleSumFields_sumValorPago = 0;
    /*for (let i = 1; i <= 100; i++) {
      const item = new ContaPagarMultiple();
      item.id = i.toString();
      item.dataPagamento = moment().toDate();
      item.valorPago = i;
      this.contaPagarMultipleSumFields_sumValorPago += i;
      item.descricao = 'Item ' + i.toString();
      this.contaPagarMultipleListItems.push(item);
    }*/
  }

  onDisplayDialogMultipleCrudConfirm() {
    this.displayDialogMultipleCrud = false;
    const itemIndex = this.contaPagarMultipleListItems.findIndex(it => it.id === this.contaPagarMultiple.id);
    if (itemIndex === -1) { // is new
      this.contaPagarMultipleListItems.push(this.contaPagarMultiple);
    } else { // updated
      this.contaPagarMultipleListItems[itemIndex] = this.contaPagarMultiple;
    }

    this.contaPagarMultiple = new ContaPagarMultiple();
  }

  onContaPagarMultipleNovo() {
    this.contaPagarMultiple = new ContaPagarMultiple();
    this.contaPagarMultiple.id = Math.random().toString(36).substr(2, 9);
    this.contaPagarMultiple.descricao = this.contaPagar.descricao;
    this.contaPagarMultiple.dataPagamento = moment().toDate();
    this.contaPagarMultiple.planoContas = this.contaPagar.planoContas;
    this.contaPagarMultiple.formaPagamento = this.contaPagar.formaPagamento;
    this.contaPagarMultiple.contaBancaria = this.contaPagar.contaBancaria;
    this.contaPagarMultiple.cartaoCredito = this.contaPagar.cartaoCredito;
    this.contaPagarMultiple.fornecedor = this.contaPagar.fornecedor;
    this.contaPagarMultiple.contaPagarId = this.contaPagar.id;

    this.displayDialogMultipleCrud = true;
  }

  onContaPagarMultipleEdit() {
    this.displayDialogMultipleCrud = true;
  }

  onContaPagarMultipleDelete() {

    if (!this.contaPagarMultipleItemsSelected) {
      return;
    }

    let message = 'Confirma a exclusÃ£o do registro selecionado?';
    if (this.contaPagarMultipleItemsSelected.length > 1) {
      message = `Confirma a exclusÃ£o dos ${this.contaPagarMultipleItemsSelected.length} registros selecionados?`;
    }


    this.confirmation.confirm({
      message: message,
      accept: () => {
        this.contaPagarMultipleItemsSelected.forEach(item => {
          const index = this.contaPagarMultipleListItems.indexOf(item);
          this.contaPagarMultipleListItems.splice(index, 1);
        });
        this.contaPagarMultipleItemsSelected = new Array();
        this.messageHandler.showSuccess('ExclusÃ£o efetuada com sucesso!');
        /*this.contaPagarService.delete(contaPagar.id)
        .then(() => {
          this.contaPagarList(0);
        })
        .catch((e) => {
          this.messageHandler.showError(e);
        });*/
      }
    });
  }

  onDisplayDialogMultipleCrudCancel() {
    this.displayDialogMultipleCrud = false;
    this.contaPagarMultiple = new ContaPagarMultiple();
  }

  contaPagarMultipleToolBarButtons() {
    this.contaPagarMultipleCanEdit = this.contaPagarMultipleItemsSelected &&
      this.contaPagarMultipleItemsSelected.length === 1;

    this.contaPagarMultipleCanDelete = this.contaPagarMultipleItemsSelected &&
      this.contaPagarMultipleItemsSelected.length > 0;
  }

  onContaPagarMultipleRowSelectCheckBox(event) {
    if (this.contaPagarMultipleItemsSelected &&
      this.contaPagarMultipleItemsSelected.length === 1) { // If has only one item, get it.
        this.contaPagarMultiple = this.cloneContaPagarMultiple(this.contaPagarMultipleItemsSelected[0]);
    } else {
      this.contaPagarMultiple = new ContaPagarMultiple();
    }
    this.contaPagarMultipleToolBarButtons();
  }

  onContaPagarMultipleRowSelect(event) {
    this.contaPagarMultiple = this.cloneContaPagarMultiple(event.data);
    this.contaPagarMultipleToolBarButtons();
  }

  onContaPagarMultipleRowUnselect(event) {
    this.contaPagarMultiple = new ContaPagarMultiple();
    this.contaPagarMultipleToolBarButtons();
  }

  cloneContaPagarMultiple(obj: ContaPagarMultiple): ContaPagarMultiple {
    const result = new ContaPagarMultiple();
    for (const prop of Object.keys(obj)) {
      result[prop] = obj[prop];
    }
    return result;
  }



}
