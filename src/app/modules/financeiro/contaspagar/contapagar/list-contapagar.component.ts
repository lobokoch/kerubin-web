/**********************************************************************************************
Code generated by MKL Plug-in
Copyright: Kerubin - kerubin.platform@gmail.com

WARNING: DO NOT CHANGE THIS CODE BECAUSE THE CHANGES WILL BE LOST IN THE NEXT CODE GENERATION.
***********************************************************************************************/


import { Component, OnInit } from '@angular/core';
import {ConfirmationService, LazyLoadEvent, SelectItem} from 'primeng/api';
import { Dropdown } from 'primeng/dropdown';
import * as moment from 'moment';
import { MessageHandlerService } from 'src/app/core/message-handler.service';

import { ContaPagarService } from './contapagar.service';
import { FinanceiroContasPagarTranslationService } from './../i18n/financeiro-contaspagar-translation.service';
import { ContaPagar } from './contapagar.model';
import { ContaPagarListFilter } from './contapagar.model';
import { SortField } from './contapagar.model';
import { ContaPagarDescricaoAutoComplete } from './contapagar.model';
import { ContaPagarHistConcBancariaAutoComplete } from './contapagar.model';
import { ContaPagarAgrupadorAutoComplete } from './contapagar.model';

import { FormaPagamento } from './../enums/financeiro-contaspagar-enums.model';

import { PlanoContaAutoComplete } from './../planoconta/planoconta.model';

import { ContaBancariaAutoComplete } from './../contabancaria/contabancaria.model';

import { CartaoCreditoAutoComplete } from './../cartaocredito/cartaocredito.model';

import { FornecedorAutoComplete } from './../fornecedor/fornecedor.model';
import { ContaPagarSumFields } from './contapagar.model';
import { CustomContaPagarListService } from './custom-list-contapagar.service';

@Component({
  selector: 'app-list-contapagar',
  templateUrl: './list-contapagar.component.html',
  styleUrls: ['./list-contapagar.component.css']
})

export class ContaPagarListComponent implements OnInit {
	tableLoading = false;
	
	contaPagarListItems: ContaPagar[];
	contaPagarListTotalElements = 0;
	contaPagarListFilter = new ContaPagarListFilter();
	
	contaPagarDescricaoAutoCompleteSuggestions: ContaPagarDescricaoAutoComplete[];
	
	contaPagarDataVencimentoIsBetweenOptionsSelected: SelectItem = {label: 'Minha competência', value: '12'};
	
	
	
	contaPagarFormaPagamentoOptions: FormaPagamento[];
	
	
	
	
	
	
	contaPagarHistConcBancariaAutoCompleteSuggestions: ContaPagarHistConcBancariaAutoComplete[];
	contaPagarAgrupadorAutoCompleteSuggestions: ContaPagarAgrupadorAutoComplete[];
	dateFilterIntervalDropdownItems: SelectItem[];
	
	
	contaPagarSumFields = new ContaPagarSumFields();
	
	constructor(
	    private contaPagarService: ContaPagarService,
	    private customContaPagarListService: CustomContaPagarListService,
	    private financeiroContasPagarTranslationService: FinanceiroContasPagarTranslationService,
	    private confirmation: ConfirmationService,
	    private messageHandler: MessageHandlerService
	) { 
		this.customContaPagarListService.setComponent(this);
	}
	
	ngOnInit() {
		this.contaPagarDataVencimentoIsBetweenOptionsOnClick(null);
		this.initializeDateFilterIntervalDropdownItems();
		
		
		
		
		this.initializeContaPagarFormaPagamentoOptions();
		
		this.contaPagarListFilter.dataPagamentoIsNotNull = false;
		
		this.contaPagarListFilter.dataPagamentoIsNull = true;
		
		
		this.contaPagarListFilter.idConcBancariaIsNotNull = false;
		
		
	}
	
	contaPagarList(pageNumber = 0) {
		this.tableLoading = true;
	    this.contaPagarListFilter.pageNumber = pageNumber;
	    this.contaPagarService
	    .contaPagarList(this.contaPagarListFilter)
	    .then(result => {
	    	try {
		      	this.contaPagarListItems = result.items;
		      	this.contaPagarListTotalElements = result.totalElements;
		      
				this.getContaPagarSumFields();
			} finally {
				this.tableLoading = false;
			}
	    })
	    .catch(e => {
	    	this.tableLoading = false;
	    });
		
	}
	
	getContaPagarSumFields() {
		this.tableLoading = true;
	    this.contaPagarService.getContaPagarSumFields(this.contaPagarListFilter)
		.then(response => {
			try {
				this.contaPagarSumFields = response;
			} finally {
				this.tableLoading = false;
			}
		})
		.catch(e => {
			this.tableLoading = false;
			this.messageHandler.showError(e);
		});
	}
	
	contaPagarFilterSearch() {
	    this.contaPagarList(0);
	}
	
	deleteContaPagar(contaPagar: ContaPagar) {
	    this.confirmation.confirm({
	      message: 'Confirma a exclusão do registro?',
	      accept: () => {
	        this.contaPagarService.delete(contaPagar.id)
	        .then(() => {
	          this.messageHandler.showSuccess('Registro excluído!');
	          this.contaPagarList(0);
	        })
	        .catch((e) => {
	          this.messageHandler.showError(e);
	        });
	      }
	    });
	}
	
	contaPagarListOnLazyLoad(event: LazyLoadEvent) {
	    if (event.multiSortMeta) {
	      this.contaPagarListFilter.sortFields = new Array(event.multiSortMeta.length);
	      event.multiSortMeta.forEach(sortField => {
	      	this.contaPagarListFilter.sortFields.push(new SortField(sortField.field, sortField.order));
	      });
	    } else {
	    	this.contaPagarListFilter.sortFields = new Array(2);
	    	this.contaPagarListFilter.sortFields.push(new SortField('dataVencimento', 1));
	    	this.contaPagarListFilter.sortFields.push(new SortField('valor', 0));
	    }
	    const pageNumber = event.first / event.rows;
	    this.contaPagarListFilter.pageSize = event.rows;
	    this.contaPagarList(pageNumber);
	}
	
	contaPagarDescricaoAutoComplete(event) {
	    const query = event.query;
	    this.contaPagarService.contaPagarDescricaoAutoComplete(query)
	    .then((result) => {
	      this.contaPagarDescricaoAutoCompleteSuggestions = result;
	    })
	    .catch(erro => {
	      this.messageHandler.showError('Erro ao buscar registros com o termo: ' + query);
	    });
	}
	
	contaPagarHistConcBancariaAutoComplete(event) {
	    const query = event.query;
	    this.contaPagarService.contaPagarHistConcBancariaAutoComplete(query)
	    .then((result) => {
	      this.contaPagarHistConcBancariaAutoCompleteSuggestions = result;
	    })
	    .catch(erro => {
	      this.messageHandler.showError('Erro ao buscar registros com o termo: ' + query);
	    });
	}
	
	contaPagarAgrupadorAutoComplete(event) {
	    const query = event.query;
	    this.contaPagarService.contaPagarAgrupadorAutoComplete(query)
	    .then((result) => {
	      this.contaPagarAgrupadorAutoCompleteSuggestions = result;
	    })
	    .catch(erro => {
	      this.messageHandler.showError('Erro ao buscar registros com o termo: ' + query);
	    });
	}
	
	
	private initializeContaPagarFormaPagamentoOptions() {
	    this.contaPagarFormaPagamentoOptions = [
	    	{ label: 'Selecione um item', value: null },
	    	{ label: this.getTranslation('financeiro.contas_pagar.contaPagar_formaPagamento_dinheiro'), value: 'DINHEIRO' }, 
	    	{ label: this.getTranslation('financeiro.contas_pagar.contaPagar_formaPagamento_conta_bancaria'), value: 'CONTA_BANCARIA' }, 
	    	{ label: this.getTranslation('financeiro.contas_pagar.contaPagar_formaPagamento_cartao_credito'), value: 'CARTAO_CREDITO' }, 
	    	{ label: this.getTranslation('financeiro.contas_pagar.contaPagar_formaPagamento_vale_refeicao'), value: 'VALE_REFEICAO' }, 
	    	{ label: this.getTranslation('financeiro.contas_pagar.contaPagar_formaPagamento_vale_alimentacao'), value: 'VALE_ALIMENTACAO' }, 
	    	{ label: this.getTranslation('financeiro.contas_pagar.contaPagar_formaPagamento_cheque'), value: 'CHEQUE' }, 
	    	{ label: this.getTranslation('financeiro.contas_pagar.contaPagar_formaPagamento_outros'), value: 'OUTROS' }
	    ];
	}
	  
	
	contaPagarPlanoContasAutoCompleteFieldConverter(planoContas: PlanoContaAutoComplete) {
		if (planoContas) {
			return (planoContas.codigo || '<nulo>') + ' - ' + (planoContas.descricao || '<nulo>');
		} else {
			return null;
		}
	}
	
	contaPagarContaBancariaAutoCompleteFieldConverter(contaBancaria: ContaBancariaAutoComplete) {
		if (contaBancaria) {
			return (contaBancaria.nomeTitular || '<nulo>') + ' - ' + (contaBancaria.numeroConta || '<nulo>');
		} else {
			return null;
		}
	}
	
	contaPagarCartaoCreditoAutoCompleteFieldConverter(cartaoCredito: CartaoCreditoAutoComplete) {
		if (cartaoCredito) {
			return (cartaoCredito.nomeTitular || '<nulo>') + ' - ' + (cartaoCredito.numeroCartao || '<nulo>');
		} else {
			return null;
		}
	}
	
	contaPagarFornecedorAutoCompleteFieldConverter(fornecedor: FornecedorAutoComplete) {
		if (fornecedor) {
			return (fornecedor.nome || '<nulo>');
		} else {
			return null;
		}
	}
	
	
	private initializeDateFilterIntervalDropdownItems() {
		this.dateFilterIntervalDropdownItems = [
		    {label: 'Minha competência', value: '12'},
		    {label: 'Hoje', value: '0'},
		    {label: 'Amanhã', value: '1'},
		    {label: 'Esta semana', value: '2'},
		    {label: 'Semana que vem', value: '3'},
		    {label: 'Este mês', value: '4'},
		    {label: 'Mês que vem', value: '5'},
		    {label: 'Este ano', value: '6'},
		    {label: 'Ano que vem', value: '7'},
		    {label: 'Ontem', value: '8'},
		    {label: 'Semana passada', value: '9'},
		    {label: 'Mês passado', value: '10'},
		    {label: 'Ano passado', value: '11'},
		    {label: 'Personalizado', value: '99'}
		  ];
	}
	
	
	contaPagarDataVencimentoIsBetweenOptionsOnClick(dropdown: Dropdown) {
		this.contaPagarListFilter.dataVencimentoFrom = null;
		this.contaPagarListFilter.dataVencimentoTo = null;
		
		let dateFrom = null;
		let dateTo = null;
	
		const valor = Number(this.contaPagarDataVencimentoIsBetweenOptionsSelected.value);
		switch (valor) {
			case 0: // Hoje
				dateFrom = moment();
				dateTo = moment();
				break;
				//
			case 1: // Amanhã
				dateFrom = moment().add(1, 'day');
				dateTo = moment().add(1, 'day');
				break;
				//
			case 2: // Esta semana
				dateFrom = moment().startOf('week');
				dateTo = moment().endOf('week');
				break;
				//
			case 3: // Semana que vem
				dateFrom = moment().add(1, 'week').startOf('week');
				dateTo = moment().add(1, 'week').endOf('week');
				break;
				//
			case 4: // Este mês
				dateFrom = moment().startOf('month');
				dateTo = moment().endOf('month');
				break;
				//
			case 5: // Mês que vem
				dateFrom = moment().add(1, 'month').startOf('month');
				dateTo = moment().add(1, 'month').endOf('month');
				break;
				//
			case 6: // Este ano
				dateFrom = moment().startOf('year');
				dateTo = moment().endOf('year');
				break;
				//
			case 7: // Ano que vem
				dateFrom = moment().add(1, 'year').startOf('year');
				dateTo = moment().add(1, 'year').endOf('year');
				break;
				// Passado
			case 8: // Ontem
				dateFrom = moment().add(-1, 'day');
				dateTo = moment().add(-1, 'day');
				break;
				//
			case 9: // Semana passada
				dateFrom = moment().add(-1, 'week').startOf('week');
				dateTo = moment().add(-1, 'week').endOf('week');
				break;
				//
			case 10: // Mês passado
				dateFrom = moment().add(-1, 'month').startOf('month');
				dateTo = moment().add(-1, 'month').endOf('month');
				break;
				//
			case 11: // Ano passado
				dateFrom = moment().add(-1, 'year').startOf('year');
				dateTo = moment().add(-1, 'year').endOf('year');
				break;
				
			case 12: // Minha competência
				dateFrom = moment().startOf('month');
				dateTo = moment().endOf('month').add(5, 'day'); // Five days after and of the month
				break;
			
			default:
				break;
		} // switch
	
		if (dateFrom != null) {
		  this.contaPagarListFilter.dataVencimentoFrom = dateFrom.toDate();
		}
		
		if (dateTo != null) {
		  this.contaPagarListFilter.dataVencimentoTo = dateTo.toDate();
		}
		
		if (dateFrom != null && dateTo != null) {
		  // this.contaPagarList(0);
		}
	}
	
			
	applyRuleGridColumnsStyleClass_SituacaoConta(contaPagar: ContaPagar): String {
		const result = this.customContaPagarListService.applyRuleGridColumnsStyleClass_SituacaoConta(contaPagar);
		if(result) {
			return result === '' ? null : result;
		}
		
		
		if ((contaPagar.contaPaga === false) && moment(contaPagar.dataVencimento).isBefore(moment({h: 0, m: 0, s: 0, ms: 0}), 'day')) {
			return 'kb-conta-badge kb-conta-vencida';
		}
		
		if ((contaPagar.contaPaga === false) && moment(contaPagar.dataVencimento).isSame(moment({h: 0, m: 0, s: 0, ms: 0}), 'day')) {
			return 'kb-conta-badge kb-conta-vence-hoje';
		}
		
		if ((contaPagar.contaPaga === false) && moment(contaPagar.dataVencimento).isSame(moment({h: 0, m: 0, s: 0, ms: 0}).add(1, 'day'), 'day')) {
			return 'kb-conta-badge kb-conta-vence-amanha';
		}
		
		if ((contaPagar.contaPaga === false) && moment(contaPagar.dataVencimento).isBetween(moment({h: 0, m: 0, s: 0, ms: 0}), moment({h: 0, m: 0, s: 0, ms: 0}).add(3, 'day'))) {
			return 'kb-conta-badge kb-conta-vence-proximos-3-dias';
		}
		
		if ((contaPagar.contaPaga === false) && moment(contaPagar.dataVencimento).isBetween(moment({h: 0, m: 0, s: 0, ms: 0}), moment({h: 0, m: 0, s: 0, ms: 0}).endOf('week'))) {
			return 'kb-conta-badge kb-conta-vence-esta-semana';
		}
		
		if ((contaPagar.contaPaga)) {
			return 'kb-conta-badge kb-conta-paga';
		}
		
		if ((contaPagar.contaPaga === false)) {
			return 'kb-conta-badge kb-conta-ok';
		}
	
	    return null;
	}
			
	applyRuleAddColumnSituacaoContaGetValue(contaPagar: ContaPagar): String {
		
	    return this.customContaPagarListService.applyRuleAddColumnSituacaoContaGetValue(contaPagar);
	    
	}
	
	actionBaixarContaComDataPagamentoHojeWhen(contaPagar: ContaPagar) {
		return (contaPagar.contaPaga === false);
	}
	
	actionBaixarContaComDataPagamentoHoje(contaPagar: ContaPagar) {
		this.contaPagarService.actionBaixarContaComDataPagamentoHoje(contaPagar.id)
			.then(() => {
			  this.messageHandler.showSuccess('Ação executada com sucesso!');
			  this.contaPagarList(0);
			})
			.catch((e) => {
				console.log('Erro ao executar a ação actionBaixarContaComDataPagamentoHoje: ' + e);
			  	this.messageHandler.showError('Não foi possível executar a ação.');
			});
	}
	
	actionBaixarContaComDataPagamentoIgualDataVencientoWhen(contaPagar: ContaPagar) {
		return (contaPagar.contaPaga === false) && moment(contaPagar.dataVencimento).isBefore(moment({h: 0, m: 0, s: 0, ms: 0}), 'day');
	}
	
	actionBaixarContaComDataPagamentoIgualDataVenciento(contaPagar: ContaPagar) {
		this.contaPagarService.actionBaixarContaComDataPagamentoIgualDataVenciento(contaPagar.id)
			.then(() => {
			  this.messageHandler.showSuccess('Ação executada com sucesso!');
			  this.contaPagarList(0);
			})
			.catch((e) => {
				console.log('Erro ao executar a ação actionBaixarContaComDataPagamentoIgualDataVenciento: ' + e);
			  	this.messageHandler.showError('Não foi possível executar a ação.');
			});
	}
	
	actionEstornarPagamentoContaComUmCliqueWhen(contaPagar: ContaPagar) {
		return (contaPagar.contaPaga) && (String(contaPagar.tipoPagamento) === 'SINGLE');
	}
	
	actionEstornarPagamentoContaComUmClique(contaPagar: ContaPagar) {
		this.contaPagarService.actionEstornarPagamentoContaComUmClique(contaPagar.id)
			.then(() => {
			  this.messageHandler.showSuccess('Ação executada com sucesso!');
			  this.contaPagarList(0);
			})
			.catch((e) => {
				console.log('Erro ao executar a ação actionEstornarPagamentoContaComUmClique: ' + e);
			  	this.messageHandler.showError('Não foi possível executar a ação.');
			});
	}
	
	// TODO: temporário, só para testes.
	getTranslation(key: string): string {
		const value = this.financeiroContasPagarTranslationService.getTranslation(key);
		return value;
		
		// const result = key.substring(key.lastIndexOf('_') + 1);
		// return result;
	}
	
	
}
