/**********************************************************************************************
Code generated by MKL Plug-in
Copyright: Kerubin - kerubin.platform@gmail.com

WARNING: DO NOT CHANGE THIS CODE BECAUSE THE CHANGES WILL BE LOST IN THE NEXT CODE GENERATION.
***********************************************************************************************/


import { Component, OnInit } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import {MessageService} from 'primeng/api';

import { ElementRef, ViewChild } from '@angular/core';
import { SysUser } from './sysuser.model';
import { SysUserService } from './sysuser.service';
import { SecurityAuthorizationTranslationService } from './../i18n/security-authorization-translation.service';
import * as moment from 'moment';

import { TenantService } from './../tenant/tenant.service';
import { Tenant } from './../tenant/tenant.model';
import { TenantAutoComplete } from './../tenant/tenant.model';

import { AccountType } from './../enums/security-authorization-enums.model';
import { MessageHandlerService } from 'src/app/core/message-handler.service';


@Component({
  selector: 'app-crud-sysuser',
  templateUrl: './crud-sysuser.component.html',
  styleUrls: ['./crud-sysuser.component.css']
})

export class SysUserComponent implements OnInit {
	showHideHelp = false; // for show/hide help.
	
	
	calendarLocale: any;
	
	sysUser = new SysUser();
	sysUserTenantAutoCompleteSuggestions: TenantAutoComplete[];
	sysUserAccountTypeOptions: AccountType[];
	
	@ViewChild('sysUser_name_elementRef', {static: true}) sysUserDefaultElementRef: ElementRef;
	
	constructor(
	    private sysUserService: SysUserService,
	    private securityAuthorizationTranslationService: SecurityAuthorizationTranslationService,
	    private tenantService: TenantService,
	    private route: ActivatedRoute,
	    private messageHandler: MessageHandlerService
	) { 
		this.initializeSysUserAccountTypeOptions();
	}
	
	ngOnInit() {
		this.initLocaleSettings();
		this.initializeEnumFieldsWithDefault();
	    const id = this.route.snapshot.params['id'];
	    if (id) {
	      this.getSysUserById(id);
	    }
	    this.sysUserDefaultElementSetFocus();
	}
	
	getShowHideHelpLabel(): string {
		return this.showHideHelp ? 'Ocultar ajuda' : 'Mostrar ajuda';
	}
	
	beginFormSysUser(form: FormControl) {
	    form.reset();
	    setTimeout(function() {
	      this.sysUser = new SysUser();
	      this.initializeEnumFieldsWithDefault();
		  this.sysUserDefaultElementSetFocus();
	    }.bind(this), 1);
	}
	
	validateAllFormFields(form: FormGroup) {
	    Object.keys(form.controls).forEach(field => {
	      const control = form.get(field);
	
	      if (control instanceof FormControl) {
	        control.markAsDirty({ onlySelf: true });
	      } else if (control instanceof FormGroup) {
	        this.validateAllFormFields(control);
	      }
	    });
	}
	
	saveFormSysUser(form: FormGroup) {
		if (!form.valid) {
	      this.validateAllFormFields(form);
	      return;
	    }
	    if (this.isEditing) {
	      this.update();
	    } else {
	      this.create();
	    }
	}
	
	create() {
		
	    this.sysUserService.create(this.sysUser)
	    .then((sysUser) => {
	      this.sysUser = sysUser;
	      this.messageHandler.showSuccess('Registro criado com sucesso!');
	      this.sysUserDefaultElementSetFocus();
	    }).
	    catch(error => {
	      this.messageHandler.showError(error);
	    });
	}
	
	update() {
	    this.sysUserService.update(this.sysUser)
	    .then((sysUser) => {
	      this.sysUser = sysUser;
	      this.messageHandler.showSuccess('Registro alterado!');
	      this.sysUserDefaultElementSetFocus();
	    })
	    .catch(error => {
	      this.messageHandler.showError(error);
	    });
	}
	
	getSysUserById(id: string) {
	    this.sysUserService.retrieve(id)
	    .then((sysUser) => { 
	    	this.sysUser = sysUser;
	    })
	    .catch(error => {
	      this.messageHandler.showError(error);
	    });
	}
	
	get isEditing() {
	    return Boolean(this.sysUser.id);
	}
	
	initializeEnumFieldsWithDefault() {
		this.sysUser.accountType = this.sysUserAccountTypeOptions[1].value;
	}
	
	
	sysUserTenantAutoCompleteClear(event) {
		// The autoComplete value has been reseted
		this.sysUser.tenant = null;
	}
	
	sysUserTenantAutoCompleteOnBlur(event) {
		// Seems a PrimeNG bug, if clear an autocomplete field, on onBlur event, the null value is empty string.
		// Until PrimeNG version: 7.1.3.
		if (String(this.sysUser.tenant) === '') {
			this.sysUser.tenant = null;
		}
	}
	
	sysUserTenantAutoComplete(event) {
	    const query = event.query;
	    this.sysUserService
	      .tenantTenantAutoComplete(query)
	      .then((result) => {
	        this.sysUserTenantAutoCompleteSuggestions = result as TenantAutoComplete[];
	      })
	      .catch(error => {
	        this.messageHandler.showError(error);
	      });
	}
	
	sysUserTenantAutoCompleteFieldConverter(tenant: TenantAutoComplete) {
		let text = '';
		if (tenant) {
			if (tenant.name) {
			    if (text !== '') {
			      text += ' - ';
			    }
			    text += tenant.name; 
			}
			
		}
		
		if (text === '') {
			text = null;
		}
		return text;
	}
	
	private initializeSysUserAccountTypeOptions() {
	    this.sysUserAccountTypeOptions = [
	    	{ label: 'Selecione um item', value: null },
	    	{ label: this.getTranslation('security.authorization.sysUser_accountType_personal'), value: 'PERSONAL' }, 
	    	{ label: this.getTranslation('security.authorization.sysUser_accountType_corporate'), value: 'CORPORATE' }
	    ];
	}
	  
	
	// TODO: temporário, só para testes.
	getTranslation(key: string): string {
		const value = this.securityAuthorizationTranslationService.getTranslation(key);
		return value;
		
		// const result = key.substring(key.lastIndexOf('_') + 1);
		// return result;
	}
	
	
	
	
	
	
	
	initLocaleSettings() {
		this.calendarLocale = this.securityAuthorizationTranslationService.getCalendarLocaleSettings();
	}
	
	
	
				
	sysUserDefaultElementSetFocus() {
		try {
	    	this.sysUserDefaultElementRef.nativeElement.focus();
	    } catch (error) {
	    	console.log('Error setting focus at sysUserDefaultElementSetFocus:' + error);
	    }
	}
}
